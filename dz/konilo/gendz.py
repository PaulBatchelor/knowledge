from pprint import pprint
import re
filename="full-dictionary.txt"
fp = open(filename)
dict_str = fp.read()
divider = "-"*72 + "\n"
chunks = dict_str.split(divider)

def remove_first_linkbreak(chunk):
    if chunk[0] == "\n":
        return chunk[1:]
    return chunk

chunks = list(map(remove_first_linkbreak, chunks))

# pprint(chunks[50])

def chunk_to_node(chunk):
    lines = chunk.split("\n")
    if (len(lines) < 3):
        return
    name = lines[0].split()[1]
    name = lines[0].split()[1]
    name = name.split(':')
    desc = " ".join(lines[3].split()[1:])
    stack = lines[1].split()[2]
    prefix = None
    obj = {}
    if name[0] == "sigil" and len(name) > 2:
        name = name[0]
        prefix = "sigil"
    elif len(name) > 1:
        prefix, name = name
    else:
        name = name[0]
    obj = {"name": name, "desc": desc, "stack": stack}
    if prefix:
        obj["prefix"] = prefix
    return obj

objlist = []
for chunk in chunks:
    obj = chunk_to_node(chunk)
    if obj:
        objlist.append(obj)

# pprint(objlist)

prefixes = set(map(lambda s: s["prefix"], filter(lambda s: "prefix" in s, objlist)))
# pprint(prefixes)

def mkprefixes(prefixes):
    print("zz prefixes")
    for prefix in prefixes:
        print("nn", prefix)

# mkprefixes(prefixes)

def mknodes(objlist):
    for obj in objlist:
        name = obj["name"]
        node_name = re.sub(r'\*', "_ast", name)
        node_name = re.sub("@", "_amp", node_name)
        node_name = re.sub("-", "_", node_name)
        node_name = re.sub(r'\?', "_qst", node_name)
        node_name = re.sub(r'\{', "_lbrace", node_name)
        node_name = re.sub(r'\}', "_rbrace", node_name)
        node_name = re.sub(r'\[', "_lbrack", node_name)
        node_name = re.sub(r'\]', "_rbrack", node_name)
        node_name = re.sub(r'\(', "_lpar", node_name)
        node_name = re.sub(r'\)', "_rpar", node_name)
        node_name = re.sub(r'#', "_hash", node_name)
        node_name = re.sub(r';', "semicolon", node_name)
        node_name = re.sub(r'\\', "_bslash_", node_name)
        node_name = re.sub(r'\/', "_fslash_", node_name)
        node_name = re.sub(r'\!', "_exclaim", node_name)
        node_name = re.sub(r'\'', "_singlequote", node_name)
        desc = obj["desc"]
        if "prefix" in obj:
            node_name = obj["prefix"] + "/" + node_name
            name = obj["prefix"] + ":" + name
        text = name + ": " + desc
        print("nn", node_name)
        print("co $ ..")
        print("ln", text)
        print("ff", node_name)
        print("fb", text)

print("zz AUTOGENERATED MAYBE DO NOT TOUCH?")
print("ns forth")
print("nn konilo")
print("ns +konilo")
print("nn dictionary")
print("zz co $ ..")
print("ns +dictionary")
mkprefixes(prefixes)
mknodes(objlist)
