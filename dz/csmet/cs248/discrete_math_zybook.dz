ns csmet/cs248

nn discrete_math_zybook
ln Discrete Math Zybook

ns +discrete_math_zybook

nn glossary
ln Glossary of keywords and terms

nn refs
ln External references

nn toc
at ol
ln Table of Contents

nn toc/01_logic
at ol
nn toc/02_proofs
at ol
nn toc/03_sets
at ol
nn toc/04_functions
at ol
nn toc/05_boolean_algebra
nn toc/06_relations_digraphs
nn toc/07_computation
nn toc/08_induction_recursion
nn toc/09_integer_properties
nn toc/10_introduction_to_counting
nn toc/11_advanced_counting
nn toc/12_discrete_probability
nn toc/13_graphs
nn toc/14_trees
nn toc/15_appendix

ns +toc/01_logic
nn 01_propositions_and_logical_operators
ln 1.1: Propositions and Logical Operators

nn 02_evaluating_compound_propositions
ln 1.2: Evaluating Compound Propositions

nn 03_conditional_statements
ln 1.3: Conditional Statements

nn 04_logical_equivalence
ln 1.4: Logical Equivalence

nn 05_laws_propositional_logic
ln 1.5: Laws of Propositional Logic

ns +05_laws_propositional_logic

nn idempotent
ln Idempotent Laws
td Create Equation

nn associative
ln Associative laws
td Create Equation

nn commutative
ln Commutative Laws
td Create Equation

nn distributive
ln Distributive Laws
td Create Equation

nn identity
ln Identity Laws
td Create Equation

nn domination
ln Domination Laws
rm AKA "annihilator"
td Create Equation

nn double_negation
ln Double Negation Laws
td Create Equation

nn complement
ln Complement Laws
td Create Equation

nn de_morgans
ln De Morgan's Law
td Create Equation

nn absorption
ln Absorption Laws
td Create Equation

nn conditional_identities
ln Conditional Identities
td Create Equation
rm AKA "material conditional" or "material biconditional"

zz -05_laws_propositional_logic
ns ..


nn 06_predicates_and_quantifiers
ln 1.6: Predicates and Quantifiers

nn 07_quantified_statements
ln 1.7: quantified statements

nn 08_de_morgans_law_for_quantified_statements
ln 1.8: De Morgan's Law for Quantified Statements

nn 09_nested_quantifiers
ln 1.9: Nested Quantifiers

nn 10_more_nested_quantifiers
ln 1.10: More Nested Quantifiers

nn 11_logical_reasoning
ln 1.11: Logical Reasoning

nn 12_rules_of_inference_with_propositions
ln 1.12 Rules of Inference with Propositions


ns +12_rules_of_inference_with_propositions

nn rules_of_inference

ns +rules_of_inference

nn modus_ponens
ln modus ponens: p, p -> q | q
ff What is modus ponens?
fb p, p->q | q

nn modus_tollens
ln modus tollens: !q, p -> q | !p
ff What is modus tollens?
fb !q, p -> q | !p

nn addition
ln addition (disjunctive introduction): p | p V q
ff what is the rule of addition (disjuncative introduction)?
fb p | p V q

nn simplification
ln simplification: p ^ q | p
ff what is the rule of simplification?
fb p ^ q | p

nn hypothetical_syllogism
ln hypothetical syllogism: p -> q, q -> r | p -> r
ff What is hypothetical syllogism?
fb p -> q, q -> r | p -> r

nn disjunctive_syllogism
ln disjunctive_syllogism: p V q, !p | q
ff What is disjunctive syllogism?
fb p V q, !p | q

nn resolution
ln resolution: p V q, !p V r | q V r
ff What is the rule of resolution?
fb p V q, !p V r | q V r

zz -rules_of_inference
ns ..

zz -12_rules_of_inference_with_propositions
ns ..

nn 13_rules_of_inference_with_quantifiers
ln 1.13 Rules of Inference with Quantifiers

ns ../..


nn glossary/logic
ln Logic: the study of formal reasoning.
co $ ?01_propositions_and_logical_operators
ff Define "Logic"
fb Logic: the study of formal reasoning.

nn glossary/proposition
ln Proposition: a statement that is either true or false.
ff Define "Proposition"
ff Proposition: a statement that is either true or false.
co $ ../logic
cr The most basic element in logic is a proposition
co $ ?01_propositions_and_logical_operators

nn glossary/truth_value
ln Truth Value: a value indicating whether the proposition is
ln true or false. A proposition is still a proposition
ln whether its truth value is known to be true, false, unknown,
ln or a matter of opinion.
co $ ../proposition
cr A proposition's truth value
ff What is a Truth Value?
fb Truth Value: a value indicating whether the proposition is
fb true or false. A proposition is still a proposition
fb whether its truth value is known to be true, false, unknown,
fb or a matter of opinion.

nn glossary/propositional_variable
co $ ?01_propositions_and_logical_operators
ln Propositional Variable: a variable used to denote arbitrary
ln propositions.
ff What is a propositional variable?
fb Propositional Variable: a variable used to denote arbitrary
fb propositions.
co $ ?glossary/proposition

nn glossary/compound_proposition
co $ ?01_propositions_and_logical_operators
ln Compound Proposition: created by connecting individual
ln propositions with logical operators.
ff What is a Compound Proposition?
fb Compound Proposition: created by connecting individual
fb propositions with logical operators.
co $ ?glossary/proposition

nn glossary/logical_operation
co $ ?01_propositions_and_logical_operators
ln Logical Operation: operation that combines proposition
ln using a particular composition rule.
ff What is a Logical Operation?
fb Logical Operation: operation that combines proposition
fb using a particular composition rule.

nn glossary/conjunction
co $ ?01_propositions_and_logical_operators
ln Conjunction: Logical Operation. Denoted by '^'. The
ln proposition $p ^ q$ is read "p and q". "p and q" is false
ln if p is false, q is false, or both are false.
co $ ../logical_operation
ff What is a Conjunction Operation?
fb Conjunction: Logical Operation. Denoted by '^'. The
fb proposition $p ^ q$ is read "p and q". "p and q" is false
fb if p is false, q is false, or both are false.

nn glossary/truth_table
co $ ?01_propositions_and_logical_operators
ln Truth Table: shows the truth value of a compound operation
ln for every possible combination of truth values for
ln the variables in the compound proposition.
ff What is a Truth Table?
fb A truth table shows the truth value of a compound operation
fb for every possible combination of truth values for the
fb variables in the compound proposition

nn glossary/disjunction
co $ ?01_propositions_and_logical_operators
ln Disjunction Operation: denoted by \/, read "or". "p or q"
ln is true either p or q is true, or both are true.
ff What is the Disjunction Operation?
fb "or". "p or q" is true if either p or q is true, or
fb both are true.
co $ ?glossary/logical_operation

nn glossary/exclusive_or
co $ ?01_propositions_and_logical_operators
ln Exlusive Or: AKA "xor". "p xor q" evaluates true when
ln p is true and q is false, or when p is false and q is
ln true.
co $ ?glossary/logical_operation
ff Describe "Exclusive Or"
fb Exlusive Or: AKA "xor". "p xor q" evaluates true when
fb p is true and q is false, or when p is false and q is
fb true.

nn glossary/negation
co $ ?01_propositions_and_logical_operators
co $ ../logical_operation
ln Negation: acts on just one proposition and has the effect
ln of reversing the truth value of the proposition.
ff What is the negation operation?
fb Negation: reverses truth value of a proposition.

zz NOTE: I would love for this to work
zz nn ?02_evaluating_compound_propositions/order_of_ops

nn glossary/conditional_operation
co $ ?03_conditional_statements
ln Conditional Operation: denoted with a right arrow symbol,
ln is read "if p, then q". Proposition is false if p is true
ln and q is false. Otherwise, it is true.
ff What is the Conditional Operation?
fb Conditional Operation: denoted with a right arrow symbol,
fb is read "if p, then q". Proposition is false if p is true
fb and q is false. Otherwise, it is true.

nn glossary/hypothesis_conclusion
co $ ?03_conditional_statements
co $ ../conditional_operation
ln In conditional operation, p is called the hypothesis,
ln and q is called the conclusion.
ff What are the components of a conditional operation called?
fb in the conditional operation (p,q), p is the hypothesis,
fb and q is the conclusion.

nn glossary/converse
co $ ?03_conditional_statements
ln Converse Statement: (q,p).
ff Give the converse statement of "If it is raining today, the game will be cancelled"
fb If the game is cancelled, it is raining today.

nn glossary/contrapositive
co $ ?03_conditional_statements
ln Contrapositive statement: (!q, !p).
ff Give the contrapositive statement of "If it is raining today, the game will be cancelled"
fb If the game is not cancelled, then it is not raining today

nn glossary/inverse
co $ ?03_conditional_statements
ln Inverse statement: (!p, !q)
ff Give the contrapositive statement of "If it is raining today, the game will be cancelled"
fb If it is not raining today, the game will not be cancelled.

nn glossary/biconditional_operation
co $ ?03_conditional_statements
ln Biconditional Statement: denoted with double-arrow. 
ln "p if and only if q". True when they have the same value,
ln false when they are different.
ff What is a Biconditional Statement?
fb Biconditional Statement: denoted with double-arrow. 
fb "p if and only if q". True when they have the same value,
fb false when they are different.

nn glossary/tautology
co $ ?04_logical_equivalence
ln Tautology: a compound proposition that is always true,
ln regardless of the truth value of the 
ln individual propositions that occur in it.
ff What is a tautology?
fb Tautology: a compound proposition that is always true,
fb regardless of the truth value of the 
fb individual propositions that occur in it.

nn glossary/contradiction
co $ ?04_logical_equivalence
ln Contradiction: a compound proposition that is always false,
ln regardless of the truth value of the individual propositions
ln that occur in it.
ff What is a contradiction?
fb Contradiction: a compound proposition that is always false,
fb regardless of the truth value of the individual propositions
fb that occur in it.
co $ ../tautology

nn glossary/logically_equivalent
co $ ?04_logical_equivalence
ln Logical Equivalence: when two compound propositions have
ln the same truth value, regardless of the truth values of
ln their individual propositions.
ff What does it mean for something to be logically equivalent?
fb Two compound propositions are said to be logically equivalent
fb when they have the same truth value, regardless of the
fb truth values in their individual propositions.

nn glossary/de_morgans_laws
co $ ?04_logical_equivalence
ln De Morgan's Laws: laws that show how to correctly distribute
ln a negation operation inside a parenthesized expression.
ff What are De Morgan's Laws?
fb De Morgan's Laws: laws that show how to correctly distribute
fb a negation operation inside a parenthesized expression.

nn glossary/predicate
co $ ?06_predicates_and_quantifiers
ln Predicate: a logical statement with a truth value that is
ln a function of one or more values.
ff What is a predicate?
fb A logical statement with a truth value that is a function
fb of one or more values.

nn glossary/domain
co $ ?06_predicates_and_quantifiers
ln Domain: the set of all possible values for the variable.

nn glossary/universal_quantifier
co $ ?06_predicates_and_quantifiers
ln Universal Quantifier: a special symbol used in mathematics
ln used to denote that a property or statement is true for
ln all elements within a specified domain or set.
ff What is a univeral quantifier?
fb A special symbol in mathematics used to denote that a
fb property or statement is true for all elements within a
fb specified domain or set.

nn glossary/counterexample
co $ ?06_predicates_and_quantifiers
ln Counterexample: an element in the domain of a universally
ln quantified statement for which the predicate is false.
ln A single counterexample is sufficient to show that a
ln universally quantified statement is false.

nn glossary/existential_quantifier
co $ ?06_predicates_and_quantifiers
ln Existential Quantifier: a special symbol used in mathematics
ln to indicate that a property or statement is true for
ln at least one element within a specified domain or set.
ff What is an existential quantifier?
fb a special symbol used in mathematics
fb to indicate that a property or statement is true for
fb at least one element within a specified domain or set.

nn glossary/quantifier
ln Quantifier: generic name for existential and universal
ln quantifiers
co $ ../existential_quantifier
co $ ../universal_quantifier
co $ ?07_quantified_statements

nn glossary/quantified_statement
co $ ?07_quantified_statements
ln Quantified Statement: a logical statement that includes
ln a universal or existential quantifier

nn glossary/free_variable
co $ ?07_quantified_statements
ln Free Variable: a variable in a predicate that is free
ln to take on any value in the domain.
ff What is a "free variable"?
fb Free Variable: a variable in a predicate that is free
fb to take on any value in the domain.

nn glossary/bound_variable
co $ ?07_quantified_statements
ln Bound Variable: a variable in a predicate that is bound
ln to a quantifier.
co $ ../free_variable

nn glossary/nested_quantifier
co $ ?09_nested_quantifiers
ln Nested Quantifier: A logical expression with more than
ln one quantifier that binds different variables in the same
ln predicate.
ff What is a nested quantifier?
fb Nested Quantifier: A logical expression with more than
fb one quantifier that binds different variables in the same
fb predicate.

nn refs/order_of_quantifiers
hl https://en.wikipedia.org/wiki/Quantifier_(logic)#Order_of_quantifiers_(nesting)
ln Order of Quantifiers (Wikipedia)
co $ ?09_nested_quantifiers

nn glossary/null_qualification_rule
td define
ln Null Qualification Rule
co $ ?10_more_nested_quantifiers

nn refs/boolean_algebra_laws
hl https://en.wikipedia.org/wiki/Boolean_algebra#Laws
co $ ?05_laws_propositional_logic

nn glossary/argument
ln Argument: a sequence of propositions, called hypotheses,
ln followed by a final proposition, called the conclusion.
co $ ?11_logical_reasoning
co $ ../hypotheses
co $ ../conclusion
ff In logic, what is an Argument?
fb Argument: a sequence of propositions, called hypotheses,
fb followed by a final proposition, called the conclusion.

nn glossary/hypotheses
ln Hypotheses: a list of propositions, in the context
ln of an argument.
ff What are hypotheses in a logical argument?
fb Hypotheses: a list of propositions, in the context
fb of an argument.
co $ ?11_logical_reasoning
co $ ../conclusion

nn glossary/conclusion
ln Conclusion: the final proposition in an argument
fb What is a Conclusion in a logical argument?
ff Conclusion: the final proposition in an argument
co $ ?11_logical_reasoning

nn glossary/valid_argument
ln Valid Argument: the conclusion is true for every truth
ln assignment to the variables that causes all of the hypotheses
ln to be true. Otherwise, it is invalid
ff What is a Valid Logical Argument?
fb Valid Argument: the conclusion is true for every truth
fb assignment to the variables that causes all of the hypotheses
fb to be true. Otherwise, it is invalid.
co $ ?11_logical_reasoning

nn refs/rules_of_inference
hl https://en.wikipedia.org/wiki/List_of_rules_of_inference#Table:_Rules_of_Inference
ln Rules of Inference
co $ ?12_rules_of_inference_with_propositions
co $ ?12_rules_of_inference_with_propositions/rules_of_inference

nn glossary/element
co $ ?13_rules_of_inference_with_quantifiers
ln Element: A value that can be plugged in for variable x
ln that belongs to the domain.
ff In logic, what is an element?
fb An element is a value belonging to a particular domain
fb that can be plugged into a quantifier.

nn glossary/arbitrary_element
ln Arbitrary Element: has no special properties other than
ln those shared by all the elements of the domain.
ff What makes an element "arbitrary"?
fb An element is arbitrary if it has no special properties
fb other than those shared by all the elements of the domain.
co $ ?13_rules_of_inference_with_quantifiers

nn glossary/particular_element
ln Particular Element: may have properties not shared by
ln the elements of the domain.
ff What makes an element "particular"?
fb An element that is considered to be particular may have
fb properties not shared by the elements of the domain.
co $ ?13_rules_of_inference_with_quantifiers
co $ ../element
co $ ../arbitrary_element

ns +toc/02_proofs
nn 01_mathematical_definitions 

nn 02_intro_to_proofs
ln 2.2: Introduction to proofs

nn 03_best_practices_common_errors_proofs
ln 2.3: Best Practices and Common Errors in Proofs

nn 04_writing_direct_proofs
ln 2.4: writing direct proofs

nn 05_proof_by_contrapositive
ln 2.5: Proof by contrapositive

nn 06_proof_by_contradiction
ln 2.6: Proof by Contradiction

nn 07_proof_by_cases
ln 2.7: Proof by Cases

ns ../..

nn glossary/parity
ln Parity: indicates if a number is even or odd. If two
ln numbers are both even or both odd, they are said to
ln have the same parity. If one is odd and the other is even,
ln the two numbers are said to have opposite parity.
ff What is parity in mathematics?
fb Parity: indicates if a number is even or odd. If two
fb numbers are both even or both odd, they are said to
fb have the same parity. If one is odd and the other is even,
fb the two numbers are said to have opposite parity.
co $ ?01_mathematical_definitions

nn glossary/rational
ln Rational: a number r is rational if there exists integers
ln x and y such that y != 0 and x = x / y.
ff What is the definition of a rational number?
fb Rational: a number r is rational if there exists integers
fb x and y such that y != 0 and x = x / y.
co $ ?01_mathematical_definitions

nn glossary/divides
ln Divides: an integer x divides an integer y if and only
ln if x !=0, and y = kx for some integer k. Denote $x | y$.
co $ ?01_mathematical_definitions
ff What is the formal definition of "divides"?
fb Divides: an integer x divides an integer y if and only
fb if x !=0, and y = kx for some integer k. Denote $x | y$.


nn glossary/prime
ln Prime: an integer n is considered prime if and only
ln if n > 1, and the only positive integers that divide into
ln n are 1 and n.
co $ ?01_mathematical_definitions
ff What is the definition of a prime number?
fb Prime: an integer n is considered prime if and only
fb if n > 1, and the only positive integers that divide into
fb n are 1 and n.

nn glossary/composite
co $ ?01_mathematical_definitions
ln Composite: An integer N is composite if and only if n > 1,
ln and there is an integer m such that 1 < m < n and m divides
ln n.
ff What is the definition of a composite number?
fb Composite: An integer N is composite if and only if n > 1,
fb and there is an integer m such that 1 < m < n and m divides
fb n.
co $ ../prime

nn glossary/theorem
co $ ?02_intro_to_proofs
ln Theorem: a statement that can be proven to be true.
ff What is a theorem?
fb A theorem is a statement that can be proven to be true.

nn glossary/proof
co $ ?02_intro_to_proofs
ln Proof: a series of steps that follow logically from
ln assumptions or from previously proven statements, with
ln a final step that results in the statement of the
ln theorem being proven.
ff What is a proof?
fb Proof: a series of steps that follow logically from
fb assumptions or from previously proven statements, with
fb a final step that results in the statement of the
fb theorem being proven.

nn glossary/axioms
co $ ?02_intro_to_proofs
ln Axiom: statements assumed to be true.
ff What is an axiom?
fb Statements assumed to be true.
co $ ../proof
cr A proof of a theorem may use axioms

nn glossary/proof_by_exhaustion
co $ ?02_intro_to_proofs
ln Proof By Exhaustion: Proving a statement by checking
ln each element. Useful if the domain is small.
ff What is proof by exhaustion?
fb Proof By Exhaustion: Proving a statement by checking
fb each element. Useful if the domain is small.

nn glossary/universal_generalization
co $ ?02_intro_to_proofs
ln Universal Generalization: a proof that that names an
ln arbitrary object in the domain, and proves the statement
ln for that object.
ff What is a Universal Generalization?
fb Universal Generalization: a proof that that names an
fb arbitrary object in the domain, and proves the statement
fb for that object.

nn glossary/counterexample/alt
co $ ?02_intro_to_proofs
ln Counterexample: an assignment of values to variables that
ln shows that a universal statement is false.
ff What is a counterexample?
fb Counterexample: an assignment of values to variables that
fb shows that a universal statement is false.
co $ ..
cr Alternative definition

nn glossary/existential_proof
co $ ?02_intro_to_proofs
ln Existential Proof: A proof that shows an existential
ln statement is true.
ff What is an existential proof?
fb Existential Proof: A proof that shows an existential
fb statement is true.

nn glossary/constructive_proof_of_existence
co $ ?02_intro_to_proofs
co $ ../existential_proof
ln Constructive Proof of Existence: gives a specific
ln example of an element in the domain or a set of
ln directions to construct an element in the domain that
ln has the required properties.

nn glossary/existential_instantiation
co $ ?03_best_practices_common_errors_proofs
ln Existential Instantiation: a law of logic that says if
ln an object is known to exist, then that object can be given
ln a name, as long as the name is not currently being used
ln to denote something else.
ff What is existential instantiation
fb Existential Instantiation: a law of logic that says if
fb an object is known to exist, then that object can be given
fb a name, as long as the name is not currently being used
fb to denote something else.

nn glossary/direct_proof
co $ ?04_writing_direct_proofs
ln Direct Proof: A proof where in the conditional statement,
ln the hypothesis is assumed to be true, and the conclusion
ln is proven as a result of the assumption.
ff What is a direct proof?
fb Direct Proof: A proof where in the conditional statement,
fb the hypothesis is assumed to be true, and the conclusion
fb is proven as a result of the assumption.

nn glossary/proof_by_contrapositive
co $ ?05_proof_by_contrapositive
ln Proof by Contrapositive: A proof that proves a conditional
ln theorem of the form p -> c by showing that the contrapositive
ln !c -> !p is true. In other words, !c is true, and !p is
ln proven as a result of !c.

nn glossary/irrational_number
co $ ?05_proof_by_contrapositive
ln Irrational Number: a real number that is not rational.
ff What is an irrational number?
fb Irrational Number: a real number that is not rational.

nn glossary/indirect_proof
co $ ?06_proof_by_contradiction
ln Indirect Proof: another name for proof by contradiction
ff What is an indirect proof?
fb Another name for proof by contradiction

nn glossary/proof_by_cases
co $ ?02_proofs/07_proof_by_cases
ln Proof By Cases: starts with a universal statement,
ln breaks domain down into different classes, and gives a
ln different proof for each class.
ff What is a Proof by Cases?
fb Proof By Cases: starts with a universal statement,
fb breaks domain down into different classes, and gives a
fb different proof for each class.

nn refs/theorem_on_friends_and_strangers
hl https://en.wikipedia.org/wiki/Theorem_on_friends_and_strangers
ln Theorem On Friends And Strangers: Suppose a party has
ln six people. Consider any 2 of them. They might be meeting
ln for the first time, in which case we will call them
ln mutual strangers; or they might have met before, in which
ln case we will call them mutual acquaintences. The theorem
ln says: In any party of six people, at least three of them
ln are (pairwise) mutual strangers or mutual acquaintences
ff Summarize the theorem on friends and strangers
fb In any party of six people, at least three of them
fb are (pairwise) mutual strangers or mutual acquaintences
co $ ?02_proofs/07_proof_by_cases
cr This chapter outlines a proof by cases for a similar
cr theorem they call "friends and enemies".

nn glossary/WLOG
co $ ?02_proofs/07_proof_by_cases
ln Without Loss of Generality (WLOG): used in mathematical
ln proofs to narrow the scope of a proof to one special
ln case in situations when the proof can be easily
ln adapted to apply to the general case.
ff What is "Without Loss of Generality"?
fb Without Loss of Generality (WLOG): used in mathematical
fb proofs to narrow the scope of a proof to one special
fb case in situations when the proof can be easily
fb adapted to apply to the general case.

ns +toc/03_sets

nn 01_sets_and_subsets
ln 3.1: Sets and Subsets

nn 02_sets_of_sets
ln 3.2: Sets of Subsets

nn 03_union_and_intersection
ln 3.3: Union and Intersection

nn 04_more_set_operations
ln 3.4: more set operations

nn 05_set_identities
ln 3.5: Set identities

nn 06_cartesian_products
ln 3.6: Cartesian Products

nn 07_partitions
ln 3.7: Partitions

zz toc/03_sets
ns ../..

nn glossary/set
co $ ?01_sets_and_subsets
ln Set: a collection of objects
ff What is a set?
fb Set: a collection of objects.

nn glossary/roster_notation
co $ ?01_sets_and_subsets
ln Roster Notation: a way to notate elements in a set,
ln using curly braces. ex: A = {2, 4, 6, 8}
ff What is roster notation?
fb Roster Notation: a way to notate elements in a set,
fb using curly braces. ex: A = {2, 4, 6, 8}

nn glossary/empty_set
co $ ?01_sets_and_subsets
ln Empty Set: A set with no elements. Denoted with
ln an 0 and a backslash.
ff What is an empty set?
fb An empty set is a set with no elements.

nn glossary/null_set
co $ ?01_sets_and_subsets
ln Null set: another name for empty set
co $ ../empty_set

nn glossary/finite_set
co $ ?01_sets_and_subsets
ln finite set: a set that is either empty or
ln whose elements can be numbered 1 through N
ln for some positive number N.
ff What is a finite set?
fb finite set: a set that is either empty or
fb whose elements can be numbered 1 through N
fb for some positive number N.

nn glossary/infinite_set
co $ ?01_sets_and_subsets
ln Infinite Set: A set that is not finite.
co $ ../finite_set
ff What is an infinite set?
fb An infinite set is a set that is not finite.

nn glossary/cardinality
co $ ?01_sets_and_subsets
ln Cardinality: Denoted by |A|, is the number of
ln distinct elements in A.
ff What is the cardinality of a set?
fb Cardinality: Denoted by |A|, is the number of
fb distinct elements in A.

nn glossary/set_builder_notation
co $ ?01_sets_and_subsets
ln Set Builder Notation: A notation that defines a set
ln by specifying that the set includes all elements
ln in a larger set that also satisfy certain conditions.

nn glossary/universal_set
ln Universal Set: usually denoted with the variable U,
ln is a set that contains all elements mentioned in a
ln particular context.
ff What is the Universal Set?
fb Universal Set: usually denoted with the variable U,
fb is a set that contains all elements mentioned in a
fb particular context.
co $ ?01_sets_and_subsets

nn glossary/subset
ln Subset: A is said to be a subset of B if every
ln element in A is also an element in B.
ff What is a subset?
fb Subset: A is said to be a subset of B if every
fb element in A is also an element in B.
co $ ?01_sets_and_subsets

nn glossary/proper_subset
ln Proper Subset: If A is a subset of B, and B has
ln an element that is not in A.
co $ ?01_sets_and_subsets
ff What is proper subset?
fb Proper Subset: If A is a subset of B, and B has
fb an element that is not in A.

nn glossary/power_subset
co $ ?02_sets_of_sets
ln Power Subset: P(A), is the set of all subsets of A.
ff What is a power subset?
fb Power Subset: P(A), is the set of all subsets of A.

nn glossary/difference
co $ ?04_more_set_operations
ln Difference: the difference between 2 sets A and B,
ln denoted A - B, is the set of elements that are in A
ln but not in B.
ff What is the difference between two sets?
fb Difference: the difference between 2 sets A and B,
fb denoted A - B, is the set of elements that are in A
fb but not in B.

nn glossary/symmetric_difference
co $ ?04_more_set_operations
ln Symmetric Difference: The set of elements that are in
ln either A or B, but not in both.
co $ ../difference
ff What is the Symmetric Difference between two sets?
fb For sets A and B, the symmetric difference is
fb the set of elements that are in either A or B, but
fb not both.

nn glossary/complement
co $ ?04_more_set_operations
ln Set Complement: for some set A, the set of all elements
ln in U that are not elements of A.
ff What is the Complement of a set?
fb Set Complement: for some set A, the set of all elements
fb in U that are not elements of A.

nn glossary/set_identity
co $ ?05_set_identities
ln Set Identity: an equation involving sets that true
ln regardless of the contents of the sets in the expression
ff What is a set identity?
fb Set Identity: an equation involving sets that true
fb regardless of the contents of the sets in the expression

nn glossary/cartesian_product
co $ ?06_cartesian_products
ln Cartesian Product: for two sets, A and B, the Cartesian
ln product of A and B, denoted A x B, is the set of all
ln ordered pairs in which the first entry in A and the second
ln entry in B.
ff What is the Cartesian Product?
fb Cartesian Product: for two sets, A and B, the Cartesian
fb product of A and B, denoted A x B, is the set of all
fb ordered pairs in which the first entry in A and the second
fb entry in B.

nn glossary/disjoint
co $ ?07_partitions
ln disjoint: two sets, A and B, are said to be disjoint
ln if the intersections of the two sets is empty.
ff What does it mean to be disjoint?
fb disjoint: two sets, A and B, are said to be disjoint
fb if the intersections of the two sets is empty.

nn glossary/pairwise_disjoint
co $ ?07_partitions
ln pariwise disjoint: a sequence of sets is said to be pairwise
ln disjoint if every pair of distinct sets in the sequence is disjoint.
ff What does it mean to be pairwise disjoint?
fb pariwise disjoint: a sequence of sets is said to be pairwise
fb disjoint if every pair of distinct sets in the sequence is disjoint.
co $ ../disjoint

nn glossary/partition
co $ ?07_partitions
ln partition: a partition of a non-empty set A is a collection of
ln non-empty subsets of A such that each element of A is in exactly
ln one of the subsets.
ff What is a partition?
fb partition: a partition of a non-empty set A is a collection of
fb non-empty subsets of A such that each element of A is in exactly
fb one of the subsets.

ns +toc/04_functions

nn 01_definition_of_functions
ln 4.1: definition of functions

nn 02_floor_and_ceiling_functions
ln 4.2: Floor and ceiling functions

nn 03_properties_of_functions
ln 4.3: Properties of functions

ns ../..

nn glossary/well_defined
ln well defined: a function is said to be well-defined
ln if every element in the domain maps to exactly one
ln element in the target.
ff What does it mean for a function to be well-defined?
fb well defined: a function is said to be well-defined
fb if every element in the domain maps to exactly one
fb element in the target.

nn glossary/injective
co $ ?03_properties_of_functions
ln injective: a function maps different elements in
ln the domain to different elements in the target.
ff What does it mean for a function to be injective/one-to-one?
fb injective: a function maps different elements in
fb the domain to different elements in the target.

nn glossary/one-to-one
co $ ?03_properties_of_functions
co $ ../injective
cr AKA
ln one-to-one mapping

nn glossary/surjective
co $ ?03_properties_of_functions
ln surjective: a function whose range is equal to the
ln target.
ff What does it mean for a function to be surjective/onto?
fb surjective: a function whose range is equal to the
fb target.

nn glossary/onto
co $ ?03_properties_of_functions
co $ ../surjective
cr AKA
ln "onto" mapping

nn glossary/bijective
co $ ?03_properties_of_functions
ln Bijective: a function is both surjective (onto)
ln and injective (one-to-one).
ff What does it mean for a function to be bijective?
fb Bijective: a function is both surjective (onto)
fb and injective (one-to-one).

nn glossary/one_to_one_correspondence
ln One-to-one correspondence
co $ ../bijective
cr AKA
co $ ?03_properties_of_functions
