@2025-10-01 Day 31
@09:10 Settling in, logging times, etc #timelog:00:15:52
@09:27 examine hw4, problem 3
#! dz csmet/cs342/hw4

@09:51 what is a well defined function? related problems to 4.4 (inverse functions) #timelog:00:54:05
#! dz csmet/cs248/discrete_math_zybook/toc/04_functions/04_inverse_of_function

@14:34 4.6 logarithms and exponents #timelog:00:48:49
#! dz csmet/cs248/discrete_math_zybook/toc/04_functions/06_logarithms_and_exponents

@15:34 5.1 and 5.2 #timelog:00:23:39
#! dz csmet/cs248/discrete_math_zybook/toc/05_boolean_algebra/01_intro_to_boolean_algebra
#! dz csmet/cs248/discrete_math_zybook/toc/05_boolean_algebra/02_boolean_functions

@20:12 5.2 #timelog:00:30:23
#! dz csmet/cs248/discrete_math_zybook/toc/05_boolean_algebra/02_boolean_functions

@20:45 1.4 security model #timelog:00:27:34
#! dz csmet/cy100

@21:37 Paging #timelog:00:30:00 #sonilo #ink:02M

@2025-10-02 Day 32
@08:22 settling in, logs #timelog:00:11:45

@08:35 code up hw4, problem 3 #timelog:00:09:47
#! dz csmet/cs342/hw4

@08:40 ink up hw4, problem 2 #timelog:00:20:35
#! dz $

@09:24 code up hw4, problem 2 #timelog:00:18:35
#! dz $

@10:21 scanning, cropping, binning #archiving #timelog:00:30:00

@12:40 some initial setup for chapter 6 #timelog:00:05:45
#! dz csmet/cs248/discrete_math_zybook/toc/06_relations_digraphs

@14:06 6.1 introduction to binary relations
#! dz csmet/cs248/discrete_math_zybook/toc/06_relations_digraphs/01_intro_binary_relations

@18:00 cs248 lecture week 5 #timelog:02:45:00 #bumet

@22:12 5.3 disjunctive and conjunctive normal form #timelog:00:33:16
#! dz csmet/cs248/discrete_math_zybook/toc/05_boolean_algebra/03_disjunctive_conjunctive_normal_form

@2025-10-03 Day 33
@11:45 block/memwrite ideas for linked list #ink:01R #sonilo #timelog:00:37:53
Trying out the non-photo-blue pen (which by the way shows
up on scans). I like the control of it, but it will take
some getting used to. Hopefully I will be less slow at it.

@12:44 bookkeeping. setting up october #timelog:00:05:38

@13:40 scan, crop, bin #archiving #timelog:00:17:30

@13:57 making some inkbook scripts #timelog:00:13:00

@14:23 cy100 test/quiz thing? what's that like #timelog:00:08:42
#! dz csmet/cy100
I have passed unit 1!

@14:37 cs342 problem 1, initial ink #timelog:00:54:20
#! dz csmet/cs342/hw4

@15:32 cs342 problem 1, code up solution and test it #timelog:00:11:52
#! dz csmet/cs342/hw4

@15:51 memwrite examples #ink:02T #sonilo #timelog:00:56:58

@17:01 attempts to implement initial memory writer commands #timelog:01:13:56 #sonilo

@21:06 7.1 an introduction to algorithms #timelog:00:54:21
#! dz csmet/cs248/discrete_math_zybook/toc/07_computation/01_intro_to_algos

@2025-10-04 Day 34. Bow Market RC Meetup
I got a lot of biking in today on this uncharacteristically
warm october day. However, no loggable work was accomplished.

@2025-10-05 Day 35
@10:05 double check and submit cs342 assignment #timelog:00:10:45

@10:24 screenshot slides for unit 2 of CY100
#! dz csmet/cy100
All uploaded and ready to be read

@10:47 write down glosszary terms #timelog:00:13:01
#! dz csmet/cs248

@11:14 triptych #ink:02V #timelog:01:07:17

@12:30 5.4 functional completeness #timelog:00:17:19
#! dz csmet/cs248/discrete_math_zybook/toc/05_boolean_algebra/04_functional_completeness

@13:48 5.4 continued #timelog:00:17:41
#! dz $

@17:15 5.4 continued again #timelog:00:43:05
#! dz $

@18:07 5.4 wrapup #timelog:00:23:31
#! dz $

@18:38 5.5 boolean satisfiability #timelog:00:32:23
#! dz csmet/cs248/discrete_math_zybook/toc/05_boolean_algebra/05_boolean_satisfiability

@19:13 CY100 2.1 Intro to Symmetric Encryption #timelog:00:16:10
#! dz csmet/cy100

@21:23 5.5 wrap-up #timelog:00:39:54
#! dz csmet/cs248/discrete_math_zybook/toc/05_boolean_algebra/05_boolean_satisfiability

@20:48 CY100 2.1 continued #timelog:00:28:25
#! dz csmet/cy100

@2025-10-06 Day 36
@11:13 updating logs, some knowledge graph updates #timelog:00:17:13

@11:35 back to sonilo coding #sonilo #timelog:01:15:19

@14:00 5.6 Gates and Circuits #timelog:00:06:19
#! dz csmet/cs248/discrete_math_zybook/toc/05_boolean_algebra/06_gates_and_circuits

@15:24 5.6 continued #timelog:00:16:24
#! dz $

@18:00 cs-342 lecture #bumet #timelog:02:45:00

@21:23 5.6 Continued again #timelog:00:38:13
#! dz $

@22:11 6.2 properties of binary relations #timelog:00:31:35
#! dz csmet/cs248/discrete_math_zybook/toc/06_relations_digraphs/02_props_of_binary_relations

@2025-10-07 Day 37

@10:38 Linked List Stack thoughts (again) #ink:032 #timelog:00:41:14

@11:43 6.3 Direct graphs, paths, and cycles #timelog:00:19:55
#! dz csmet/cs248/discrete_math_zybook/toc/06_relations_digraphs/03_digraphs_paths_cycles

@13:10 6.3 continued #timelog:00:22:25
#! dz $

@13:37 Sound vs Interaction in Sonilo #sonilo #tinmelog:00:18:59

@14:05 CY100 2.2 Block vs Stream Cipher #timelog:00:49:53
#! dz csmet/cy100

@15:01 logging stuff, adding vocab to cs248 #timelog:00:20:28
#! dz csmet/cs248

@16:45 6.3 continued #timelog:00:16:48
#! dz csmet/cs248/discrete_math_zybook/toc/06_relations_digraphs/03_digraphs_paths_cycles

@17:18 scoping out cs342 HW5, some boilerplate #timelog:00:09:33
#! dz csmet/cs342/hw5
Problem 1: write a function called isMinHeap that
checks if the input array is a minHeap.
---
Problem 2: least common ancestor BST. This is a leetcode
problem that I can never get quite right. Make sure to
identify the edge cases.
---
Most of the work for both of these I imagine will be
coming up with examples to test. I vaguely remember Knuth
talking about the challenges of coming up with good
examples for trees in textbooks, though I may be misremembering.

@19:57 6.4 the composition of relations #timelog:00:15:59
#! dz csmet/cs248/discrete_math_zybook/toc/06_relations_digraphs/04_composition_of_relations

@21:20 Sonilo: sound vs interaction #ink:033 #sonilo #timelog:00:28:15

@2025-10-08 Day 38
@09:56 Settling in, logging #timelog:00:04:41

@10:09 cs248 midterm review: chapter 1 #timelog:01:04:26
#! dz csmet/cs248/discrete_math_zybook/toc/01_logic

@13:08 more chapter 1 review #timelog:00:59:37
#! dz $

@14:05 2.3 Modern Symmetric Encryption Algorithms #timelog:00:31:08
#! dz csmet/cy100

#15:57 8.2 Recurrence Relations #timelog:00:33:50
#! dz csmet/cs248/discrete_math_zybook/toc/08_induction_recursion/02_recurrence_relations

@20:34 sonilo-ing #timelog:01:39:09 #sonilo
I think I have a block list working finally. I initially
had this tricky where I would use memory offsets to calculate
block value and I was going to save some space by packing
2 nodes to a word, but then I realize I lose the elegance
of the packing scheme. So, we're back to each node being
a word, with 16 bits being wasted on empty data (for now),
and the block number being computed as an offset from the
linked list.

@2025-10-09 Day 39
@11:27 cache #ink:029 #timelog:00:30:37 #sonilo

@12:28 logging in. updating logs. #timelog:00:05:13

@12:35 Chapter 3 review #timelog:00:09:34
#! dz csmet/cs248/discrete_math_zybook/toc/03_sets

@14:37 more chapter 3 #timelog:00:39:45
#! dz $

@18:00 cs248 (midterms) #timelog:02:45:00

@2025-10-10 Day 40
@09:38 logging in. planning.
@09:48 I need to start scheduling in times to work on sonilo #sonilo #timelog:00:25:15
If I don't, it's going to slip through my fingers.
---
I've become pretty reliant on a calendar (of the Google variety
currently) to distribute my academic workload. Why stop
there?
---
This sounds very very much against the spirit of "passionate work".
But, if I only worked music when I felt like it, I'd never
get anything done.
---
Thoughts for today: I would like to bring Sonilo to NY. What
do I want to have done by then? I leave on the 24th.

@10:19 CS-342 HW5 problem 2 inking #timelog:01:11:32
#! dz csmet/cs342/hw5

@13:35 6.5 graph powers and the transitive closure #timelog:01:03:07
#! dz csmet/cs248/discrete_math_zybook/toc/06_relations_digraphs/05_graph_powers_transitive_closure

@15:38 CY100 2.4 #timelog:00:48:27
#! dz csmet/cy100

@16:55 cs248 6.5 continued #timelog:00:46:12
#! dz csmet/cs248/discrete_math_zybook/toc/06_relations_digraphs/05_graph_powers_transitive_closure

@20:14 try to pass unit 2 of CY100 #timelog:00:16:16
#! dz csmet/cy100

@2025-10-11 Day 41
@10:24 Sonilo Coding Day. Cache structure? #sonilo #timelog:01:15:41
A cache in sonilo is a structure that makes it easier
to manage blocks from the blockstack.
---
Primarily, a cache represents a set of blocks allocated.
One would be able to allocate a block from the blockstack,
and then add it to the cache.
---
When a cache is cleared, all the blocks in the set get freed
and returned to the blockstack for reuse.
---
Eventually, Sonilo will be composed out of smaller programs
called fragments. Fragments can belong to a context. Blocks
can be allocated and owned by a context. There can be multiple
contexts in Sonilo.
A cache is associated with a particular
context (referenced via a number known as a resource id).
---
The render thread of Sonilo can free a context by sending
a message containing the resource id to the memory manager.
The memory manager looks up this cache, clears the cache,
and frees the cache itself.
---
The set of blocks can be represented in a 1024-bit number,
which is half a block. Each bit represents a block id.
---
The other half of a block may be used for a block mapping
list. I don't think I want to articulate all of what this
is yet, but it's a list that maps local block id values to
renderer block id values to copy over. But, I'm still thinking
about that. It could also be a quick stack for convenient
block re-use. For now, it's just free space.
---
Working on the bitset.

@12:46 inking up hw5, problem 2 #timelog:00:41:59
#! dz csmet/cs342/hw5

@13:45 coding up hw5, problem 2 (attempting, at least) #timelog:00:16:54
#! dz $
The textbook I'm using is a maxheap. I will test and make
sure that works, then build the minheap version.
---
Actually, coding this up in Python first to make sure the
logic works. I don't want to deal with learning how to Java main
functions from scratch just yet.
---
whipped up what seems to be a working max heap checker.
I generated some min heaps. Not sure if they are actually min
heaps. Will need to visualize them (draw them out?). I might
actually give a crack at drawing then and then making the arrays
myself

@16:20 CS 248 8.3 Summations #timelog:01:05:20
#! dz csmet/cs248/discrete_math_zybook/toc/08_induction_recursion/03_summations

@17:53 cs 248 8.4 mathematical induction #timelog:00:34:00
#! dz csmet/cs248/discrete_math_zybook/toc/08_induction_recursion/04_mathematical_induction

@20:26 8.4 continued #timelog:00:48:03
#! dz csmet/cs248/discrete_math_zybook/toc/08_induction_recursion/04_mathematical_induction

@2025-10-12 Day 42
@10:02 cs 342 homework inking #timelog:00:20:44
#! dz csmet/cs342/hw5
Working on building max/min heaps from scratch

@12:36 settling in, updating logs #timelog:00:07:34

@12:45 test out my maxheaps and minheaps #timelog:00:05:25
#! dz $
I already have the maxheap validator working as expected
in python. But, the code in java is a minheap so I need
to build my own. I already built another maxheap, and if
that works, then I can confirm I can build heaps manually,
and can start working on a minheap implementation.
---
Okay, the logic seems to be sound... for my python implementation.
Now I just gotta port all of this to Java

@12:52 work on tree LCA problem #timelog:00:18:32
#! dz csmet/cs342/hw5

@14:14 code up problem 2 (LCA) #timelog:00:46:28
Handling the edge case feels a little messy to me. I went
with adding funcitionality so that if the nodes match,
it effectively turns into search. I could have just used
the supplied "find" method to check ahead of time. This
might be *slightly* faster.
---
Not my best work, but it works. Oh well, gotta move forward.

@15:03 code up problem 1 (minHeapCheck) #timelog:00:19:09
#! dz $

@15:27 submit assignment #timelog:00:13:36
#! dz $
They work, they could be better. But, they work.

@16:58 cs 248 8.5 more inductive proofs #timelog:01:19:47
#! dz csmet/cs248/discrete_math_zybook/toc/08_induction_recursion/05_more_inductive_proofs

@21:02 cs 248 8.6 Strong induction and well ordering #timelog:00:40:40
#! dz csmet/cs248/discrete_math_zybook/toc/08_induction_recursion/06_strong_induction_well_ordering

@17:33 scanning, cropping, binning #archiving #timelog:00:36:48

@2025-10-13 Day 43

@09:33 TAOCP reading, chap vol 1, 2.5: The Buddy System #timelog:01:15:52
#! dz TAOCP/vol1/ch02/05

@11:11 8.6 continued #timelog:00:46:27
#! dz csmet/cs248/discrete_math_zybook/toc/08_induction_recursion/06_strong_induction_well_ordering

@14:22 more 8.6 #timelog:01:06:20
#! dz csmet/cs248/discrete_math_zybook/toc/08_induction_recursion/06_strong_induction_well_ordering

@17:20 6.6 Matrix multiplication and graph powers #timelog:00:34:04
#! dz csmet/cs248/discrete_math_zybook/toc/06_relations_digraphs/06_matrix_multiplication_graph_powers

@20:10 cs-248 6.6 continued #timelog:01:16:39
#! dz $

@2025-10-14 Day 44
@09:43 logging oct 13, updates to oct 12 #timelog:00:26:17

@09:53 I need better wildcard matching for nodes
These strings are getting ridiculous. Something like
?discrete_math_zybook?08_induction%/06% would be excellent.

@11:35 6.7 Partial Orders #timelog:00:19:57
#! dz csmet/cs248/discrete_math_zybook/toc/06_relations_digraphs/07_partial_orders

@13:00 6.7 continued #timelog:00:21:13
#! dz $

@15:14 7.2 Asymptotic growth of functions #timelog:00:48:07
#! dz csmet/cs248/discrete_math_zybook/toc/07_computation/02_asymptotic_growth

@18:00 cs342 class (on a tuesday instead of monday because of holiday) #bumet #timelog:02:45:00

@22:20 7.2 continued #timelog:01:08:46
#! dz $

@2025-10-15 Day 45
@11:58 logging #timelog:00:14:06

@13:00 More Buddy System studying #timelog:00:56:27
#! dz TAOCP/vol1/ch02/05

@14:35 8.9 Loop Invariants #timelog:01:08:24
#! dz csmet/cs248/discrete_math_zybook/toc/08_induction_recursion/07_loop_invariants

@16:32 6.8 Strict Orders and Directed Acyclic Graphs #timelog:00:33:13
#! dz csmet/cs248/discrete_math_zybook/toc/06_relations_digraphs/08_strict_orders_DAGs

@19:17 6.8 continued #timelog:00:17:36
#! dz $

@2025-10-16 Day 46
@08:49 logging, scanning, binning, tagging #archiving
Ugh, duplicate node woes. Trying to add more description
to dagzet.
---
Okay, fixed it. oof. Progress though?
