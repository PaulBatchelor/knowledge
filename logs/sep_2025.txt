@2025-09-04 Settling into Newton. First day of classes
I arrived in Newton last Saturday, and have been setting
things up for the long haul. I finally have enough of a
workstation to get started.

@08:24 settling in, setting up knowledge
Today is my first day at my desk. Getting this ready
to watch lecture videos. I am behind.

@08:34 now, where was I
#! dz coursera/algos1/news
we are behind on problems. my percolation assignment is
very overdue.
---
For module 3, I watched the video, but I did not take any
notes. Or at least, I didn't seem to transcribe anything
for the knowledge graph.

@08:47 ugh. I need to see my messages. tool mind strikes again
#! dz coursera/algos1/news
Given a node, list the messages associated with that node.
---
Infrastructure pains. How do I get these logs built with
just this knowledge graph. I guess for now we can't. Seems
to build quickly enough.
---
logzet can build all my logs, apparently. That's cool.
Now to figure out how to get the query right.
---
Uh-oh. Entries only have a date, but no time.
---
Got a query readable enough for now. Going to turn this
into a script.

@09:28 how many days? #longwalk #timelog:00:29:00
I think it's hard to understand time.
---
I am beginning a journey. A long one. Well, it feels long
right now. This is the start. The end is somewhere around
2027. At that point, I will have finished up this masters
degree, and with any luck, will have found some stability.
---
I was going to call this "The Long Haul", but that's a little
cliche. I'm going to call this thing "The Long Walk". I like
walking. Also, these things take one step at a time. That's
really the only way to think about it without going insane.
One step at a time. But also walking towards a horizon.
---
I figured endpoint could be September 1st, 2027. I've written
a little script to calculate the days until then. 726 days.
That's about 103 weeks. I'm hoping on average to pump out
about 4 hours a day of work, 6 days a week. So, that's about
2,472 hours. Let's round that down to 2400 hours to give
some breathing room. That's 2400 * 60 minutes is 1.44 * 10^5
minutes, which is 8.64 * 10^6 seconds.
---
I unfortunately did not start timing things yet, but I guess
I should. I want these hours logged.

@10:18 setting up my note-taking spot #timelog:00:15:00

@10:34 Percolation #timelog:01:29:21
#! dz coursera/algos1/modules/02_union_find/percolation_assignment
There are two classes to fill out. One models a percolation
system. The other runs that model several times and performs
statistics.
---
Might be best to go bottoms-up.
---
Setting up some test code. Looks like there's an option main()
function that you can use to write little test functions.
---
There's also a PercolationVisualizer class? Seems to be
included. It is not mentioned in the assignment.
---
I am not going to worry about that one. I think I have
enough in place coding-wise that I can just think about
the problem itself again.
---
Got some initial code working for the Percolation. As
a sanity check, I made sure all closed wouldn't percolate,
and all open would percolate. With any luck, this should
be the implementation. What I'll have to do now is
set up the PercolationStats program, and check and see
if it works.

@13:29 online workshop #bumet #timelog:00:14:54

@15:19 online workshop continued #timelog:00:02:10

@15:22 start the sexual harassment seminar #bumet #timelog:00:45:19

@18:00 CS-248 BU MET #timelog:02:45:00 #bumet

@2025-09-05 MFA day?
@10:17 What the hell was that last night #bumet #timelog:00:08:42
#! dz csmet/CS248
That was probably the worst class I've ever had in my life.
Professor came in 25 minutes late, spent the first hour
talking about his life, went over the incredibly unhelpful
syllabus, and then hastily began explaning boolean logic.
Also, he yelled at a student. He was asking for clarification on
propositional statements, and corrected the professor by
citing the textbook directly. It was unreal, and it was cold
and I was shivering the whole time.
---
I recorded the outburst. Talked to the student after class,
asked him if it was okay if I reported it. They didn't want
any trouble. I am going to respect that. For now.
---
On the plus side, the class looks passable if I keep my head
down. Unfortunately, I am going to have to work extra hard if I
am going to learn anything. I'm too old to simply coast. That's
not how the real world works.
---
Discrete math is one of the gaps in my knowledge,
and it's unfortunate that I've been placed in a class that
does not want me to learn this. Hopefully, I can keep my head
down, and get through this class.

@10:29 let's get OCW set up #timelog:00:20:29
#! dz maths_for_cs_MIT/news

@19:45 TAOCP vol 1 reading #timelog:00:54:04

@2025-09-06 Day 6
@13:27 Lecture 1: predicates, sets and proofs #timelog:01:24:50
#! dz maths_for_cs_MIT/lectures/01_predicates_sets_proofs

@21:55 Random Gesture Thoughts Brainstorm while watching Rush Hour 2 #timelog:00:22:39 (D11)

@2025-09-07 Day 7
@08:31 Module 4: stacks and queues. lecture #timelog:00:18:38
#! dz coursera/algos1/modules/04_stacks_queues

@13:44 back at it #timelog:00:35:19
#! dz $

@15:06 finishing up #timelog:00:21:59
#! dz $

@18:29 examining assignment #timelog:00:15:53
#! dz coursera/algos1/modules/04_stacks_queues/assignment
Two asks. build a deque. build a randomized queue.
---
Dequeue is probably going to be some sort of linked list.
I don't see this being too difficult to figure out.
---
each operation for deque must be constant worst-case time.
linked list should do that.
---
The randomized queue has very specific constraints for
space and time, with an emphasis on amortized costs.
---
48n + 192 bytes memory is the max space for randomized queue.
---
cost needs to be amortized to cm for worst case, where c
is constant and m is the number of operations.

@18:48 finish up nodehyperlink, initial work on timelog #timelog:00:07:08

@20:19 more timelog scripting #timelog:00:31:23
I went down this path before. The "entries" schema
is not set up correctly. It really needs to point to the
day. Also, the time is incorrectly placed.
---
Can I work around this for now? Actually, yes I can. My generated
day timestamp actually comes in quite handy. I can group things
on that, and get an amalgamation by day. The aggregation
only happens on entries.
---
Well, it works. I have some information. Calling it "logsum".

@20:52 Now I want to do it by node. #timelog:00:05:59
Done. This is helpful.

@2025-09-08 Day 8
@09:59 gesture brainstorming #gesture #timelog:00:15:17
GSG responsibilites (C11)

@10:23 making the knowledge graph a little less fussy #timelog:00:07:53
This might all turn into a justfile at some point. I got
so many one-liner shell scripts.

@10:40 TAOCP knowledge graph setup #timelog:00:19:53
#! dz TAOCP/news
We might already have some things in place.
---
I needed to import my old graph from my old repo. The
TeX equations probably were not imported properly (had
to turn them into dagzet attributes, attributes don't have
multiline?). It builds.

@11:20 TAOCP reading (1.2) #timelog:00:32:29
#! dz TAOCP/vol1/ch01/02

@12:18 data entry #timelog:00:01:36

@12:26 some random thoughts on random queue (pardon the pun) #timelog:00:04:21
#! dz coursera/algos1/modules/04_stacks_queues/assignment
Insertion can be O(1),
and retrieval could be O(n). Retrieval could work by generating
a number between O and N, diving that many times into the
list, and popping it from that list. I don't think there's
any better way to approach this if you want unified randomness.

@14:21 back to percolation #timelog:00:53:34
#! dz coursera/algos1/modules/02_union_find/percolation_assignment
This code seems to work. I have not yet submitted it yet
though.

@15:22 add units in 15 minute cylces to logsum #timelog:00:05:21
As of writing, I've hit 9 cycles. Tonight, my lecture will
last 2 hours, 45 minutes, 11 cycles. I'll get 20 cycles.
---
My goal is to try to hit 15-16 cycles every day. Later,
I'll try to break those cycles down further into type
of activity.

@18:00 BU MET CS 342 #bumet #timelog:02:45:00

@2025-09-09 Day 9
@09:14 Morning organizing, zybooks setup #timelog:00:42:24 #logistics

@10:24 walk in woods #walking #timelog:00:36:18

@11:20 BU Met homework (discrete math) #timelog:01:21:34
#! dz csmet/CS248/discrete_math_zybook/toc/01_logic
#! dz $/01_propositions_and_logical_operators
1.1 Propositions and Logical Operators
---
I've set up the initial TOC in my knowledge graph. I did
this because I also want to build an emegent glossary.
This textbook is made up of keywords, and those are
ripe for flashcards.
---
oof. 30 minutes later, I've barely read anything and it's
all been setup. This better be worth it.

@14:39 back to my homework #timelog:00:53:23
#! dz $/02_evaluating_compound_propositions
Does this website work on my thinkpad? let's find out.
okay seems to work. Back to my mac.
---
jesus these are taking forever

@15:33 conditional statements #timelog:00:55:00
#! dz $/03_conditional_statements

@20:55 scanning notes #archiving #timelog:00:58:41
remember how my setup worked. Most of the time was remembering
and building some new tooling.

@2025-09-10 Day 10
@11:00 Pay my BU Met Bill #bumet #timelog:00:03:44
Okay payment sent.

@11:04 back to math
#! dz csmet/CS248/discrete_math_zybook/toc/01_logic

@11:07 1.4 logical equivalence #timelog:00:55:43
#! dz $/04_logical_equivalence

@14:19 Logical equivalence, continued #timelog:00:42:40
#! dz $/04_logical_equivalence

@15:02 laws of propositional logic #timelog:01:25:53
#! dz $/05_laws_propositional_logic

@19:58 predicates and quantifiers #timelog:00:35:11
#! dz $/06_predicates_and_quantifiers

@20:39 quantified statements #timelog:00:09:59
#! dz $/07_quantified_statements
Out of focus for the day. Getting sleepy. Will start
again tomorrow. I don't think I'll be able to finish this
chapter in time for class. But I think that's okay?

@2025-09-11 Day 11

@00:00 midnight work on quantified statements #timelog:00:17:05
#! dz $/07_quantified_statements
Word problems are really silly. Why do math educators
do this?
---
Ah okay, I get it. It's pretty powerful seeing the math
notation being stacked up against natural language.

@00:16 De Morgan's law for quantified statements #timelog:01:07:09
#! dz $/08_de_morgans_law_for_quantified_statements

@01:29 Nested Quantifiers #timelog:00:17:00
#! dz $/09_nested_quantifiers

@08:30 nested quantifiers continued #timelog:01:47:50
#! dz $/09_nested_quantifiers
The "two player" analogy was confusing to me early this
morning. Let's see if it gets any better.
---
If I "sound out" the math $\forall x \exists y (x + y = 0)$,
it reads "for all x, there exists a y where x + y = 0".
When I read $\exists x \forall y (x + y = 0)$, it reads
"there exists an x for all of y where x + y = 0". First one
is true, second one is false.
---
In the player analogy, the "universal player" goes first,
selecting a value, trying to make it false. The "existential
player" tries to make it true, so it can provide an edge
case. The "existential player" chooses a value, trying to make it
true. The "universal player" chooses a value, trying to make
it false.
---
I'm on wikipedia, and this was helpful:
"For every natural number, there exists a number s such
that $s = n^2$" which is true. When you reverse the order
of quantifiers, it becomes "There exists a natural number
s such that for every natural number n, $s = n^2$", which
is false because it implies that there is a single number
"s" that is the square of *every* natural number.
---
So, going back to the previous example. The reason why
The statement "there exist an integer x for all y where
x + y = 0" doesn't work is because a single value of
x would need to work for all y in order to be true.
---
I'm trying to use this player analogy, and it's breaking
down in this participation activity. They aren't using
it there in the hints. I'm getting every answer wrong.
---
De Morgan's law on nested quantified statements. It feels
like I'm missing some intermediate proof. It goes from
$\lnot \forall x \forall y$ to $\exists x \lnot \forall y$,
and I don't know if that was formally stated anywhere.

@11:30 more nested quantifiers #timelog:00:31:06
#! dz $/10_more_nested_quantifiers

@12:42 finish up the challenge #timelog:00:13:08
#! dz $/10_more_nested_quantifiers

@14:31 finish up sexual misconduct prevention training #bumet #timelog:00:36:18
Oh good, it's due on the 15th, not the 12th

@2025-09-12 Day 12
@09:41 scanning #archiving #timelog:00:53:57

@11:07 let's scope out my CS-348 assignment #bumet #timelog:00:33:54
#! dz csmet/cs342/hw1
Created an initial repo for this with the boilerplate.
Code builds and runs with justfiles. I have a main function
for LinkedList.
