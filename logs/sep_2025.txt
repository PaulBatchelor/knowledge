@2025-09-04 Settling into Newton. First day of classes
I arrived in Newton last Saturday, and have been setting
things up for the long haul. I finally have enough of a
workstation to get started.

@08:24 settling in, setting up knowledge
Today is my first day at my desk. Getting this ready
to watch lecture videos. I am behind.

@08:34 now, where was I
#! dz coursera/algos1/news
we are behind on problems. my percolation assignment is
very overdue.
---
For module 3, I watched the video, but I did not take any
notes. Or at least, I didn't seem to transcribe anything
for the knowledge graph.

@08:47 ugh. I need to see my messages. tool mind strikes again
#! dz coursera/algos1/news
Given a node, list the messages associated with that node.
---
Infrastructure pains. How do I get these logs built with
just this knowledge graph. I guess for now we can't. Seems
to build quickly enough.
---
logzet can build all my logs, apparently. That's cool.
Now to figure out how to get the query right.
---
Uh-oh. Entries only have a date, but no time.
---
Got a query readable enough for now. Going to turn this
into a script.

@09:28 how many days? #longwalk #timelog:00:29:00
I think it's hard to understand time.
---
I am beginning a journey. A long one. Well, it feels long
right now. This is the start. The end is somewhere around
2027. At that point, I will have finished up this masters
degree, and with any luck, will have found some stability.
---
I was going to call this "The Long Haul", but that's a little
cliche. I'm going to call this thing "The Long Walk". I like
walking. Also, these things take one step at a time. That's
really the only way to think about it without going insane.
One step at a time. But also walking towards a horizon.
---
I figured endpoint could be September 1st, 2027. I've written
a little script to calculate the days until then. 726 days.
That's about 103 weeks. I'm hoping on average to pump out
about 4 hours a day of work, 6 days a week. So, that's about
2,472 hours. Let's round that down to 2400 hours to give
some breathing room. That's 2400 * 60 minutes is 1.44 * 10^5
minutes, which is 8.64 * 10^6 seconds.
---
I unfortunately did not start timing things yet, but I guess
I should. I want these hours logged.

@10:18 setting up my note-taking spot #timelog:00:15:00

@10:34 Percolation #timelog:01:29:21
#! dz coursera/algos1/modules/02_union_find/percolation_assignment
There are two classes to fill out. One models a percolation
system. The other runs that model several times and performs
statistics.
---
Might be best to go bottoms-up.
---
Setting up some test code. Looks like there's an option main()
function that you can use to write little test functions.
---
There's also a PercolationVisualizer class? Seems to be
included. It is not mentioned in the assignment.
---
I am not going to worry about that one. I think I have
enough in place coding-wise that I can just think about
the problem itself again.
---
Got some initial code working for the Percolation. As
a sanity check, I made sure all closed wouldn't percolate,
and all open would percolate. With any luck, this should
be the implementation. What I'll have to do now is
set up the PercolationStats program, and check and see
if it works.

@13:29 online workshop #bumet #timelog:00:14:54

@15:19 online workshop continued #timelog:00:02:10

@15:22 start the sexual harassment seminar #bumet #timelog:00:45:19

@18:00 CS-248 BU MET #timelog:02:45:00 #bumet

@2025-09-05 MFA day?
@10:17 What the hell was that last night #bumet #timelog:00:08:42
#! dz csmet/cs248
That was probably the worst class I've ever had in my life.
Professor came in 25 minutes late, spent the first hour
talking about his life, went over the incredibly unhelpful
syllabus, and then hastily began explaning boolean logic.
Also, he yelled at a student. He was asking for clarification on
propositional statements, and corrected the professor by
citing the textbook directly. It was unreal, and it was cold
and I was shivering the whole time.
---
I recorded the outburst. Talked to the student after class,
asked him if it was okay if I reported it. They didn't want
any trouble. I am going to respect that. For now.
---
On the plus side, the class looks passable if I keep my head
down. Unfortunately, I am going to have to work extra hard if I
am going to learn anything. I'm too old to simply coast. That's
not how the real world works.
---
Discrete math is one of the gaps in my knowledge,
and it's unfortunate that I've been placed in a class that
does not want me to learn this. Hopefully, I can keep my head
down, and get through this class.

@10:29 let's get OCW set up #timelog:00:20:29
#! dz maths_for_cs_MIT/news

@19:45 TAOCP vol 1 reading #timelog:00:54:04

@2025-09-06 Day 6
@13:27 Lecture 1: predicates, sets and proofs #timelog:01:24:50
#! dz maths_for_cs_MIT/lectures/01_predicates_sets_proofs

@21:55 Random Gesture Thoughts Brainstorm while watching Rush Hour 2 #timelog:00:22:39 (D11)

@2025-09-07 Day 7
@08:31 Module 4: stacks and queues. lecture #timelog:00:18:38
#! dz coursera/algos1/modules/04_stacks_queues

@13:44 back at it #timelog:00:35:19
#! dz $

@15:06 finishing up #timelog:00:21:59
#! dz $

@18:29 examining assignment #timelog:00:15:53
#! dz coursera/algos1/modules/04_stacks_queues/assignment
Two asks. build a deque. build a randomized queue.
---
Dequeue is probably going to be some sort of linked list.
I don't see this being too difficult to figure out.
---
each operation for deque must be constant worst-case time.
linked list should do that.
---
The randomized queue has very specific constraints for
space and time, with an emphasis on amortized costs.
---
48n + 192 bytes memory is the max space for randomized queue.
---
cost needs to be amortized to cm for worst case, where c
is constant and m is the number of operations.

@18:48 finish up nodehyperlink, initial work on timelog #timelog:00:07:08

@20:19 more timelog scripting #timelog:00:31:23
I went down this path before. The "entries" schema
is not set up correctly. It really needs to point to the
day. Also, the time is incorrectly placed.
---
Can I work around this for now? Actually, yes I can. My generated
day timestamp actually comes in quite handy. I can group things
on that, and get an amalgamation by day. The aggregation
only happens on entries.
---
Well, it works. I have some information. Calling it "logsum".

@20:52 Now I want to do it by node. #timelog:00:05:59
Done. This is helpful.

@2025-09-08 Day 8
@09:59 gesture brainstorming #gesture #timelog:00:15:17
GSG responsibilites (C11)

@10:23 making the knowledge graph a little less fussy #timelog:00:07:53
This might all turn into a justfile at some point. I got
so many one-liner shell scripts.

@10:40 TAOCP knowledge graph setup #timelog:00:19:53
#! dz TAOCP/news
We might already have some things in place.
---
I needed to import my old graph from my old repo. The
TeX equations probably were not imported properly (had
to turn them into dagzet attributes, attributes don't have
multiline?). It builds.

@11:20 TAOCP reading (1.2) #timelog:00:32:29
#! dz TAOCP/vol1/ch01/02

@12:18 data entry #timelog:00:01:36

@12:26 some random thoughts on random queue (pardon the pun) #timelog:00:04:21
#! dz coursera/algos1/modules/04_stacks_queues/assignment
Insertion can be O(1),
and retrieval could be O(n). Retrieval could work by generating
a number between O and N, diving that many times into the
list, and popping it from that list. I don't think there's
any better way to approach this if you want unified randomness.

@14:21 back to percolation #timelog:00:53:34
#! dz coursera/algos1/modules/02_union_find/percolation_assignment
This code seems to work. I have not yet submitted it yet
though.

@15:22 add units in 15 minute cylces to logsum #timelog:00:05:21
As of writing, I've hit 9 cycles. Tonight, my lecture will
last 2 hours, 45 minutes, 11 cycles. I'll get 20 cycles.
---
My goal is to try to hit 15-16 cycles every day. Later,
I'll try to break those cycles down further into type
of activity.

@18:00 BU MET CS 342 #bumet #timelog:02:45:00

@2025-09-09 Day 9
@09:14 Morning organizing, zybooks setup #timelog:00:42:24 #logistics

@10:24 walk in woods #walking #timelog:00:36:18

@11:20 BU Met homework (discrete math) #timelog:01:21:34
#! dz csmet/cs248/discrete_math_zybook/toc/01_logic
#! dz $/01_propositions_and_logical_operators
1.1 Propositions and Logical Operators
---
I've set up the initial TOC in my knowledge graph. I did
this because I also want to build an emegent glossary.
This textbook is made up of keywords, and those are
ripe for flashcards.
---
oof. 30 minutes later, I've barely read anything and it's
all been setup. This better be worth it.

@14:39 back to my homework #timelog:00:53:23
#! dz $/02_evaluating_compound_propositions
Does this website work on my thinkpad? let's find out.
okay seems to work. Back to my mac.
---
jesus these are taking forever

@15:33 conditional statements #timelog:00:55:00
#! dz $/03_conditional_statements

@20:55 scanning notes #archiving #timelog:00:58:41
remember how my setup worked. Most of the time was remembering
and building some new tooling.

@2025-09-10 Day 10
@11:00 Pay my BU Met Bill #bumet #timelog:00:03:44
Okay payment sent.

@11:04 back to math
#! dz csmet/cs248/discrete_math_zybook/toc/01_logic

@11:07 1.4 logical equivalence #timelog:00:55:43
#! dz $/04_logical_equivalence

@14:19 Logical equivalence, continued #timelog:00:42:40
#! dz $/04_logical_equivalence

@15:02 laws of propositional logic #timelog:01:25:53
#! dz $/05_laws_propositional_logic

@19:58 predicates and quantifiers #timelog:00:35:11
#! dz $/06_predicates_and_quantifiers

@20:39 quantified statements #timelog:00:09:59
#! dz $/07_quantified_statements
Out of focus for the day. Getting sleepy. Will start
again tomorrow. I don't think I'll be able to finish this
chapter in time for class. But I think that's okay?

@2025-09-11 Day 11

@00:00 midnight work on quantified statements #timelog:00:17:05
#! dz $/07_quantified_statements
Word problems are really silly. Why do math educators
do this?
---
Ah okay, I get it. It's pretty powerful seeing the math
notation being stacked up against natural language.

@00:16 De Morgan's law for quantified statements #timelog:01:07:09
#! dz $/08_de_morgans_law_for_quantified_statements

@01:29 Nested Quantifiers #timelog:00:17:00
#! dz $/09_nested_quantifiers

@08:30 nested quantifiers continued #timelog:01:47:50
#! dz $/09_nested_quantifiers
The "two player" analogy was confusing to me early this
morning. Let's see if it gets any better.
---
If I "sound out" the math $\forall x \exists y (x + y = 0)$,
it reads "for all x, there exists a y where x + y = 0".
When I read $\exists x \forall y (x + y = 0)$, it reads
"there exists an x for all of y where x + y = 0". First one
is true, second one is false.
---
In the player analogy, the "universal player" goes first,
selecting a value, trying to make it false. The "existential
player" tries to make it true, so it can provide an edge
case. The "existential player" chooses a value, trying to make it
true. The "universal player" chooses a value, trying to make
it false.
---
I'm on wikipedia, and this was helpful:
"For every natural number, there exists a number s such
that $s = n^2$" which is true. When you reverse the order
of quantifiers, it becomes "There exists a natural number
s such that for every natural number n, $s = n^2$", which
is false because it implies that there is a single number
"s" that is the square of *every* natural number.
---
So, going back to the previous example. The reason why
The statement "there exist an integer x for all y where
x + y = 0" doesn't work is because a single value of
x would need to work for all y in order to be true.
---
I'm trying to use this player analogy, and it's breaking
down in this participation activity. They aren't using
it there in the hints. I'm getting every answer wrong.
---
De Morgan's law on nested quantified statements. It feels
like I'm missing some intermediate proof. It goes from
$\lnot \forall x \forall y$ to $\exists x \lnot \forall y$,
and I don't know if that was formally stated anywhere.

@11:30 more nested quantifiers #timelog:00:31:06
#! dz $/10_more_nested_quantifiers

@12:42 finish up the challenge #timelog:00:13:08
#! dz $/10_more_nested_quantifiers

@14:31 finish up sexual misconduct prevention training #bumet #timelog:00:36:18
Oh good, it's due on the 15th, not the 12th

@18:00 cs-248 lecture 2 #bumet #timelog:02:45:00

@2025-09-12 Day 12
@09:41 scanning #archiving #timelog:00:53:57

@11:07 let's scope out my CS-342 assignment #bumet #timelog:00:33:54
#! dz csmet/cs342/hw1
Created an initial repo for this with the boilerplate.
Code builds and runs with justfiles. I have a main function
for LinkedList.

@13:56 back to math #timelog:00:57:56
#! dz csmet/cs248/discrete_math_zybook/toc/01_logic
#! dz $/11_logical_reasoning

@15:53 next chapter, rules of inference #timelog:01:11:41
#! dz $/12_rules_of_inference_with_propositions

@2025-09-13 Day 13
@11:21 Implement CS-342 assignment: SortedInsert #timelog:00:41:02
#! dz csmet/cs342/hw1
Build up tests, watch them fail, then make them pass, etc.
---
Spent a lot of time debugging. I forgot to update the size,
which was causing my test to crash.
---
Also spent some time setting up the test scaffolding and
figuring out asserts in java.

@12:10 Now to reverse this linked list. #timelog:00:26:42
#! dz csmet/cs342/hw1

@17:02 Back to math, final section of chapter 1 #timelog:01:24:42
#! dz csmet/cs248/discrete_math_zybook/toc/01_logic
#! dz $/13_rules_of_inference_with_quantifiers

@2025-09-14 Day 14
@10:42 submitting cs-342 assignment #timelog:00:33:21
#! dz csmet/cs342/hw1

@12:05 C12, Block memory #ink #sonilo #timelog:00:15:01
@13:21 C13, block stack #ink #sonilo #timelog:00:13:35
@13:55 C14, Sonilo VM thoughts #ink #timelog:00:13:55

@2025-09-15 Day 15
@11:08 scanning #ink #archiving #timelog:00:25:29
At some point, I need to figure out how to efficient
review these images and throw them into bins. Then,
a means to make aggregations of theese notes
and turn them into "books".

@12:13 Command Center #doom #gaming #timelog:00:16:58

@13:10 time for some math today #timelog:01:04:49
#! dz csmet/cs248/discrete_math_zybook/toc/02_proofs
#! dz $/01_mathematical_definitions

@14:29 Halls of the Damned #doom #gaming #timelog:00:15:00

@14:45 next chapter #timelog:00:45:00
#! dz $/02_intro_to_proofs
Left off at 2.2.7: existential proofs participation activity.

@15:40 scanning and cropping #archiving #timelog:00:21:45

@18:00 cs 248 #bumet #timelog:02:45:00

@2025-09-16 Day 16
@12:46 set up sorting out ink #archiving #timelog:00:59:45
Examine tags, throw stuff into bins. Keep track of things
in a text file, generate dagzet code.

@13:55 tex book experiment #archiving #timelog:01:00:34
See: tools/inkbook.sh. This generates tex code that wraps
ink pages, one per page.

@14:29 Halls of the damned #doom #timelog:00:15:00

@15:44 back where we left off #timelog:00:20:00
#! dz csmet/cs248/discrete_math_zybook/toc/02_proofs
#! dz $/02_intro_to_proofs

@16:06 section 2.3 #timelog:00:33:33
#! dz $/03_best_practices_common_errors_proofs
Stopped at "the Language of Proofs"

@17:48 quick read #timelog:00:05:34
#! dz $/03_best_practices_common_errors_proofs

@20:00 Halls of the damned (cont) #doom #timelog:00:21:06

@21:06 Halls of the damned, Spawning vats #doom #timelog:00:32:57

@21:45 Block pool limits #sonilo #timelog:00:08:11

@22:08 Big array lookup #sonilo #timelog:00:14:54

@2025-09-17 Day 17

@10:48 Yet another line lisp #ink:017 #timelog:00:08:45 #sonilo

@11:02 Big Arrays #ink:018 #timelog:00:12:13 #sonilo

@11:38 settling in, logging hours

@11:39 Picking up where I left off #timelog:00:47:03
#! dz $/03_best_practices_common_errors_proofs
2/4 for challenge activity

@13:25 finish up challenge activity #timelog:00:04:16
#! dz $/03_best_practices_common_errors_proofs

@13:25 2.4: writing direct proofs #timelog:00:42:32
#! dz $/04_writing_direct_proofs
Left off at 2.4.5: A direct proof that the sum of two
rational numbers is rational.

@15:01 continued on 2.4 #timelog:00:25:25
#! dz $/04_writing_direct_proofs

@15:27 2.5 proof by contrapositive #timelog:00:20:37
#! dz $/05_proof_by_contrapositive
Left off at 2.5.3 participation activity

@16:05 2.5 continued #timelog:00:44:46
#! dz $/05_proof_by_contrapositive

@17:40 review chapter 1 chapters #timelog:00:40:23
#! dz csmet/cs248/discrete_math_zybook/toc/01_logic

@2025-09-18 Day 18
Dental appointment this morning. Late start.

@15:01 2.6 proof by contradiction #timelog:00:31:01
#! dz csmet/cs248/discrete_math_zybook/toc/02_proofs/05_proof_by_contrapositive
Left off with the birthday problem

@15:57 continued #timelog:00:16:46
#! dz $
Left off in the middle of 2.6.3

@18:00 CS-248 class #bumet #timelog:02:45:00

@2025-09-19 Day 19
@09:10 Check on cs-342 assignment, initial thoughts #timelog:01:39:22
#! dz csmet/cs342/hw2
There are three assignments.
---
Problem 1: Implement addTail() for a doubly linked list,
and test it to make sure it works.
---
Problem 2: Circular Linked List. Implement addTail(), search(),
removeHead(), and removeNode.
---
Problem 3: Stack. Implement a recursive solution for reversing
items in a stack.
---
Problem 1 is probably the most straight forward. Problem 2
has the most tasks, but each individual thing doesn't seem
terribly difficult (I will need to examine circular linked
lists again). Problem 3 requires the most thought because
recursion.
---
Problem 3 thoughts: non-recursive way would be popping from one
stack and pushing to another stack. Recursive way would
have a base case of an empty stack. Otherwise, pop item from
stack, call reverse, then push back?
---
Lots of inking done for problem 3

@13:33 Ink and paper, problem 3 #timelog:01:26:38
#! dz $

@15:10 more problem 3 thoughts #timelog:00:31:07
#! dz $

@16:25 I believe I have inked up a solution #ink:01j #timelog:00:26:46
#! dz $

@2025-09-20 Day 20
@10:41 cs 342 assignment work, now look at problem 2 (going backwards) #timelog:00:46:22 #ink:01K #ink:01L
#! dz $
Once I have inked up a solution for these, I will code up
both problems 2 and 3, then probably code up problem 1
directly.
---
There are 4 methods to implement for a circular list: adding
a tail, searching for a node, removing the head, and removing
a node.
---
Inkwork

@13:04 more inking #timelog:00:20:02 #ink:01L
#! dz $

@14:41 code up problem 3 #timelog:00:34:43
#! dz $

@15:23 code up problem 2, addTail #timelog:00:24:31
#! dz $

@15:49 code up problem 2, search for node #timelog:00:06:01
#! dz $

@15:57 code up problem 2, remove head #timelog:00:06:12
#! dz $

@16:19 code up problem 2, remove node #timelog:00:10:14
#! dz $

@16:33 time for problem 1 #timelog:00:27:37
#! dz $
Did not ink this one up, will attempt on-the-fly

@20:56 Memory types #sonilo #ink:01M #timelog:00:24:10

@2025-09-21 Day 21. MIT Flea Market day perhaps?
I have to move quickly if I'm going to catch any of it.

@10:15 Context #timelog:00:28:24 #sonilo #ink:01N

@10:52 submit my assignment #timelog:00:12:50
#! dz csmet/cs342/hw2

@17:14 Scanning, cropping, and binning #timelog:00:26:16

@17:51 2.7: proof by cases #timelog:00:34:09
#! dz csmet/cs248/discrete_math_zybook/toc/02_proofs/07_proof_by_cases

@2025-09-22 Day 22
@14:30 Back to math #timelog:01:05:34
#! dz csmet/cs248/discrete_math_zybook/toc/02_proofs/07_proof_by_cases
Getting caught up in one of the proofs that involves
multiplying inequalities. Sometimes the inequality flips, sometimes
it does not.
---
When x < 0 and y < 0, multiplying by x changes the direction,
yielding xy > 0.

@18:00 cs 342 lecture #bumet #timelog:02:45:00

@2025-09-23 Day 23

@10:36 settling in, getting e-ink display set up for maths #timelog:00:15:00
E-ink display AND a mouse for all the clicking and dragging
I have to do. I really hate click and drag.

@11:03 finish up 2.7 #timelog:00:06:28
#! dz csmet/cs248/discrete_math_zybook/toc/02_proofs/07_proof_by_cases

@11:11 back to 2.6 #timelog:00:06:17
#! dz csmet/cs248/discrete_math_zybook/toc/02_proofs/06_proof_by_contradiction

@11:19 scoping out chapter 3: sets
#! dz csmet/cs248/discrete_math_zybook/toc/03_sets
Seven sections. It's tuesday. We have today, tomorrow, and thursday
afternoon. If I push and do 3 sections today or tomorrow,
I might be able to finish the chapter by class thursday
evening.

@11:32 3.1 sets and subsets #timelog:00:45:07
#! dz $/01_sets_and_subsets

@12:38 Programming interface for memory manager #sonilo #timelog:00:18:59 #ink:01T

@14:05 3.1 continued #timelog:00:32:42
#! dz $/01_sets_and_subsets

@14:37 3.2: sets of sets #timelog:00:32:33
#! dz $/02_sets_of_sets

@16:38 Union and Intersection #timelog:00:33:54
#! dz $/03_union_and_intersection

@17:13 scope out hw3 #timelog:00:07:00
#! dz csmet/cs342/hw3
2 problems, 2 files. one file is a queue, one file is a stack.
---
Problem 1: implement queue using 2 stacks. This is a leetcode
problem that I've done.
---
Problem 2: implement stack using a queue. Can be done with
only one queue. The hint provided is: if there are N items
in the queue after you add an item, if you remove N - 1 items
from the queue and add them back to the queue one by one,
what will happen? Haven't done this before, but I think it's
pretty straight forward. Something like enque, then dequeue/enqueue
the others? I'll work it out later.

@20:51 Programming interface, continued #sonilo #ink:01V #timelog:00:23:21

@2025-09-24 Day 24
@10:04 settling in
Lots of troubleshooting. My e-ink display kept flickering. I think
the issue may have been that one of my hubs needed power (the mostly
passive one has a micro-usb slot for power).

@11:04 starting another day
#! dz csmet/cs248/discrete_math_zybook/toc/03_sets

@11:05 3.4 more set operations #timelog:00:47:47
#! dz $/04_more_set_operations

@13:29 3.5 set identities #timelog:01:10:14
#! dz $/05_set_identities

@16:50 3.6 Cartesian Products #timelog:00:31:44
#! dz $/06_cartesian_products
Made it all the way to the challenge activity

@20:55 finish up cartesian products #timelog:00:11:48
#! dz $/06_cartesian_products

@21:23 Memory allocation command language #sonilo #ink:01X #timelog:00:24:53

@2025-09-25 Day 25
@09:01 organizing my time by weeks #timelog:00:57:48
I am trying to get through this discrete math textbook.
There's also this weird lab they put me in that seems to be
sort of optional? I'd like to scope that out as well.
---
There's already not enough weeks to do a chapter a week.
Realistically, I probably won't be able to do the whole book.
---
Yikes. I have to do this for CS690 (Network and Cloud Security).
Probably will be a few semesters before I actually in enroll
in that, but I will eventually have to take it.
---
This CY100 lab (foundations of cybersecurity) has 6 units.
Each of these units have sub units, followed by a test
at the end. It would be nice to do a unit a week.
---
It seems like I can be done with this lab by before thanksgiving,
but I should get started next week.
---
Some chapters of the discrete math book are going to be
larger than others. Also, I have travel plans in october.
I might need to study these chapters out of order. Chapters
with more sections take more time, regardless of the difficulty
of the topic.
---
4 (functions): 6 sections. 5 (boolean algebra): 6 sections.
6 (relations/digraphs): 10 sections. 7 (computation): 6 sections.
8 (induction and recursion): 17 sections. 9 (integer properties): 9 sections.
10 (introduction to counting): 12 sections. 11 (advanced counting): 4 sections.
12 (discrete probability): 8 sections. 13 (graphs): 9 sections.
14 (trees): 6 sections.
---
that's 93 sections starting from chapter 4. we have about
10-11 weeks left, so that 9.3 sections a week. Squeezing
that into 5 days, that's about 2 sections a day.
---
I would like to go breadth first. Read as many introductions
as possible.
---
Induction and Recursion (chapter 8) is the largest chapter.
Would be worth starting this one early.
---
Less challenge activities for some of these more advanced
chapters. Interesting.
---
I've got a mildly ambitious plan for the next 2 weeks.
If I follow it, I will be a week ahead of schedule of
my "one DM chapter a week starting now". I've also sprinkled
in some of the later chapters to take a look at as well.

@10:45 3.7: partitions #timelog:00:40:05
#! dz $/07_partitions

@13:35 4.1 definition of functions #timelog:00:42:34
#! dz csmet/cs248/discrete_math_zybook/toc/04_functions
#! dz $/01_definition_of_functions

@18:00 CS-248 lecture #timelog:02:45:00 #bumet

@2025-09-26 Day 26
@11:02 Settling in
@11:06 4.2: floor and ceiling functions #timelog:00:23:54
#! dz $/02_floor_and_ceiling_functions

@13:31 Attempting to read 8.1 #timelog:00:43:35
#! dz csmet/cs248/discrete_math_zybook/toc/08_induction_recursion
#! dz $/01_sequences

@15:44 HW3 boilerplate setup #timelog:00:05:46
#! dz csmet/cs342/hw3

@15:51 HW3 problem 1: work out on paper #timelog:00:29:03
#! dz $

@16:21 HW3 Problem2: ink and paper #timelog:01:01:26
#! dz $

@17:33 Attempt to fix orphan node script #timelog:00:18:38

@19:08 Program Structure #ink:022 #timelog:00:12:34 #sonilo

@21:46 Program Structure (continued) #ink:022 #timelog:00:27:25

@2025-09-27 Day 27
@13:00 Settling in

@13:01 Transfering hw2 solution to notebook #timelog:00:37:17
#! dz $
It's inked up in my messier journal, now to give it
a second pass.
---
I write really really slowly.

@13:51 initial CY100 prep #timelog:00:35:00 #bumet
#! dz csmet/cy100
print things out, etc.
---
wow. it's not letting me print this stuff. they just want
me to view this stuff in a browser. very classy.
---
I managed to open it up in an iframe. Printing to PDF
doesn't work, so it looks like it'll just have to be
screenshots.
---
Disabled thumbnail for screenshot (cmd+3) while in fullscreen
(cmd + shift + f). Good enough. Hopefully they will load
fast enough on a remarkable.
---
that took longer than I'd like. Lots of computer fighting.
Sigh.

@15:18 code up HW3, problem 2: stack from queues #timelog:00:36:25
#! dz csmet/cs342/hw3

@18:55 4.3: properties of functions #timelog:00:22:45
#! dz csmet/cs248/discrete_math_zybook/toc/04_functions
#! dz $/03_properties_of_functions

@20:22 4.3 continued #timelog:00:29:55
#! dz $/03_properties_of_functions

@21:02 cy100 unit 1.1 slides notetaking #timelog:00:22:41
#! dz csmet/cy100
Made a mindmap for this thing. Felt appropriate.

@2025-09-28 Day 28

@09:50 Code up problem 1 #timelog:00:16:06
#! dz csmet/cs342/hw3

@10:21 submit assignment #timelog:00:12:43
#! dz csmet/cs342/hw3

@10:48 scanning, cropping, binning. also card scanning #archiving #timelog:00:52:02

@14:35 5.1: prep and reading #timelog:01:08:57
#! dz csmet/cs248/discrete_math_zybook/toc/05_boolean_algebra/01_intro_to_boolean_algebra
Trying something new today for this chapter. Going
to get the PDF and put it on my RM instead of using the
e-ink screen. I'll read the text, take notes, then go
back and do all the problems.
---
The e-ink screen is too finicky with my mac. I think it's
a USB C power issue. Possibly fixable, but it was never
a perfect solution anyways.
---
It's the second HDMI switch that is introducing issues. I'm
getting the blinking here too without the e-ink. Ran into
this last year.

@19:00 Fragment structure #ink:027 #timelog:00:10:16 #sonilo

@20:35 Array structure #ink:027 #timelog:00:16:43

@2025-09-29 Day 29
@10:53 screenshot curate all slides for unit 1 #timelog:00:07:48
#! dz csmet/cy100

@11:02 print out chapter 4, transfer to RM tablet #timelog:00:16:39
#! dz csmet/cs248/discrete_math_zybook/toc/04_functions
#! dz csmet/cs248
I've decided that I need to "slow down" from the perspective
of the instructor. I don't want to draw attention to the
fact that I am trying to read this book cover to cover.
Moving forward, I will only read and do the manual exersizes,
rather than the interactive web crap. That will keep me
under the radar, and honestly, maybe will be better in
the long run. The trouble is, there's no one there
to correct my mistakes. Maybe Claude can help?
---
Claude seems to be able to assist with some of these.
The problems seem like they'll take longer. Pen and paper,
and all that.

@12:30 4.4 #timelog:00:17:18
#! dz csmet/cs248/discrete_math_zybook/toc/04_functions/04_inverse_of_function

@13:36 4.4 continued #timelog:00:15:13
#! dz $

@14:08 4.4 continued #timelog:00:14:08
#! dz $

@14:24 cy100 1.2: security terminology #timelog:00:18:51
#! dz csmet/cy100

@18:00 cs342 #bumet #timelog:02:45:00

@2025-09-30 Day 30
@09:50 settling in
Got a new USB dongle for HDMI output. Set that up with
some trial and error. m1 mac air is finnicky. there's a bit
of a song and dance you have to do to get it right. it needs
to be plugged in, sometimes you need to log in/out again
to get the mouse/keyboard to unfreeze, etc. We'll see if
this helps with some of the flashing issues I had before.

@09:52 cs-342 hw4 review #timelog:00:12:46
#! dz csmet/cs342/hw4
3 problems.
---
problem 1: create a method that inserts a node into a tree
using an iterative method (not recursion).
---
problem 2: BFS tree traversal. (hint: use queue)
---
problem 3: create a method copyTree that returns a copy of
the current tree.
---
Once again, these seem to be ordered by difficulty.

@10:30 4.5 reading #timelog:00:46:42
#! dz csmet/cs248/discrete_math_zybook/toc/04_functions/05_composition_of_functions

@11:26 CY100: attacks and malware #timelog:00:26:16
#! dz csmet/cy100

@14:23 CY100: attacks and malware (continued) #timelog:00:28:00
