ns rust

nn std
hl https://doc.rust-lang.org/std/
ln rust standard library

ns +std


nn string
ln Rust String
hl https://doc.rust-lang.org/std/string/struct.String.html
co $ ..

nn iter
ln iter
hl https://doc.rust-lang.org/std/iter/
co $ ..

nn convert
ln convert: traits for conversions between types
hl https://doc.rust-lang.org/std/convert/index.html
co $ ..


nn convert/TryFrom
hl https://doc.rust-lang.org/std/convert/trait.TryFrom.html
ln TryFrom: Simple and safe type conversions that may 
ln fail in a controlled way under some circumstances. It 
ln is the reciprocal of TryInto.
co $ ..
co $ ../TryInto
cr Reciprocal

nn convert/TryInto
hl https://doc.rust-lang.org/std/convert/trait.TryInto.html
ln TryInto: An attempted conversion that consumes self,
ln which may or may not be expensive.
co $ ..

nn collections
ln collections
hl https://doc.rust-lang.org/std/collections/index.html
co $ ..

nn collections/hashmap
ln hashmap
co $ ..
hl https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html


nn await
hl https://doc.rust-lang.org/std/keyword.await.html
ln await: suspend execution until the result of a Future
ln is ready
ff await
fb await: suspend execution until the result of a Future
fb is ready

nn future
hl https://doc.rust-lang.org/std/future/trait.Future.html
ln Future: A future represents an asynchronous computatoin
ln obtained by use of async.
co $ ..
co await $
ff future
fb Future: A future represents an asynchronous computation
fb obtained by use of async.

nn iter/trait
hl https://doc.rust-lang.org/std/iter/trait.Iterator.html
ln iter trait
co $ ..


nn ops
hl https://doc.rust-lang.org/std/ops/index.html
ln Overloadable operators
co $ ..

nn iter/trait/copied
hl https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.copied
ln copied: creates an iterator which copies all of
ln its elements. This is useful when you have an
ln itnerator over =T=, but need an iterator over
ln =&T=.
ff What is the copied trait?
fb copied: creates an iterator which copies all of
fb its elements. This is useful when you have an
fb itnerator over =T=, but need an iterator over
fb =&T=.

nn ops/traits/FnMut
hl https://doc.rust-lang.org/std/ops/trait.FnMut.html
ln FnMut: version of the call operator that takes
ln a mutable receiver
ff What is FnMut?
fb FnMut: version of the call operator that takes
fb a mutable receiver

nn slice
hl https://doc.rust-lang.org/std/slice/index.html
ln module for the slice primitive
co $ ..

nn slice/primitive

nn env
hl https://doc.rust-lang.org/std/env/index.html
ln env: inspection and manipulation of rust environment
co $ ..

nn env/args
hl https://doc.rust-lang.org/std/env/fn.args.html
ln args(): returns the argument that this command was
ln started with (normally passed via the command line)
co $ ..

nn env/structs

nn env/structs/args
hl https://doc.rust-lang.org/std/env/struct.Args.html
ln args struct
co $ ..

nn iter/skip
hl https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.skip
ln skip() the first n elements
co $ ..
ff What does iter.skip() do?
fb skip() the first n elements

nn ops/not
hl https://doc.rust-lang.org/std/ops/trait.Not.html
ln Not trait
co $ ..
hl https://doc.rust-lang.org/std/primitive.slice.html

nn iter/collect
ln collect(): Transforms an iterator into a collection
hl https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect
co $ ..
ff What does collect() do?
fb collect(): Transforms an iterator into a collection

nn vec
hl https://doc.rust-lang.org/std/vec/struct.Vec.html
co $ ..

nn vec/len
hl https://doc.rust-lang.org/std/vec/struct.Vec.html#method.len
ln len() return size of vector
co $ ..

nn vec/is_empty
co $ ../len
cr when checking if length is zero, more idiomatic to call
cr =is_empty()=
hl https://doc.rust-lang.org/std/vec/struct.Vec.html#method.is_empty
ln is_empty(): returns true if the vector contains no elements
ff In rust, what is the most idiomatic way to check if a vector is empty?
fb Call is_empty(), a boolean that returns true if the
fb vector contains no elements

nn result
hl https://doc.rust-lang.org/std/result/index.html
ln error handling with the Result type
co $ ..

nn result/is_err
hl https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err
ln is_err(): return true if the result is err()
co $ ..
ff Function used to check if result is err()

nn result/err
hl https://doc.rust-lang.org/std/result/enum.Result.html#method.err
ln Converts from =Result<T,E>= to =Option<E>=.
co $ ..

nn macro
nn macro/matches
co $ ..

ns +collections/hashmap
nn contains_key
hl https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.contains_key
ln contains_key(): returns true if the hash map contains
ln a value for the specified key.
co $ ..
ff Function to use to see if hashmap contains a key
fb use contains_key()

nn entry
hl https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.entry
ln entry(): get's the given key's correspdoning entry
ln in the map for in-place manipulation
co $ ..
ff What does entry() do in a hashmap?
fb entry(): get's the given key's correspdoning entry
fb in the map for in-place manipulation

nn entry/or_insert_with
hl https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_insert_with
ln or_insert_with(): ensures a value is in the entry
ln by inserting the result of the default function if empty
ln and returns a mutable reference to the value in
ln the entry
co $ ..
cr entry().or_insert_with()

nn entry/or_default
hl https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_default
ln or_default()
co $ ../or_insert_with

nn insert
co $ ..
hl https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.insert
ln insert: inserts KV in map. Returns old value (or None),
ln and updates with new value (or creates new value).
ff How does HashMap.insert() work?
fb insert: inserts KV in map. Returns old value (or None),
fb and updates with new value (or creates new value).

nn get
co $ ..
hl https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.get
ln get(): Returns a reference to the corresponding key
ff How to get a value from a HashMap?
fb get()

zz -collections/hashmap
ns ../..

nn str/to_string
hl https://doc.rust-lang.org/std/primitive.str.html#method.to_string
ln to_string(): converts a given value to a String
co $ ..
ff How to convert something to a String?
fb use to_string()

nn option
hl https://doc.rust-lang.org/stable/std/option/
co $ ..

nn option/as_ref
hl https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.as_ref
co $ ..
ln as_ref(): converts from =&Option<T>= to =Option<&T>=.
ff What does as_ref() do?
fb as_ref(): converts from =&Option<T>= to =Option<&T>=.

nn str/trim
hl https://doc.rust-lang.org/std/primitive.str.html#method.trim
ln trim: returns a string slice with leading and trailing
ln whitespace removed
ff How to remove leading and trailing whitespace from a string?
fb use trim: returns a string slice with leading and trailing
fb whitespace removed

nn keywords
co $ ..

nn keywords/move
hl https://doc.rust-lang.org/std/keyword.move.html
ln move converts any variables captured by reference
ln or mutable reference to variables captured
ln by value.
co $ ..
ff What does the move keyword do?
fb move converts any variables captured by reference
fb or mutable reference to variables captured
fb by value.

nn sync
hl https://doc.rust-lang.org/std/sync/index.html
co $ ..

nn sync/arc
hl https://doc.rust-lang.org/std/sync/struct.Arc.html
co $ ..
cr A thread-safe reference-counting
cr pointer. 'Arc' stands for 'Atomically
cr Reference Counted'.
ff What is ARC?
fb A thread-safe reference-counting
fb pointer. 'Arc' stands for 'Atomically
fb Reference Counted'.

nn marker
co $ ..

nn marker/send
hl https://doc.rust-lang.org/std/marker/trait.Send.html
co $ ..
ln Types that can be transferred across thread
ln boundaries.
ff What is the Send trait?
fb Types that can be transferred across thread
fb boundaries.

nn collections/btreemap
hl https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html
co $ ..
ln An ordered map based on a B-Tree.
ff Btreemap
fb An ordered map based on a B-Tree.

nn str/starts_with
hl https://doc.rust-lang.org/std/primitive.str.html#method.starts_with
co $ ..
ln Returns true if the given pattern matches a
ln prefix of this string slice.
ff Function used for prefix matching on strings
fb starts_with()

nn sync/mutex
hl https://doc.rust-lang.org/std/sync/struct.Mutex.html
co $ ..

nn keywords/enum
hl https://doc.rust-lang.org/std/keyword.enum.html
co $ ..

nn str
hl https://doc.rust-lang.org/std/primitive.str.html
ln str
co $ ..

nn str/split_whitespace
hl https://doc.rust-lang.org/std/primitive.str.html#method.split_whitespace
ln split_whitespace(): split at whitespace
co $ ..
co ../../iter/collect $
cr used with collect() to create vector of split items
ff Function used to split string at whitespace
fb split_whitespace()

nn modules
hl https://doc.rust-lang.org/std/#modules
co $ ..

nn macros
hl https://doc.rust-lang.org/std/#macros
co $ ..

nn primitives
hl https://doc.rust-lang.org/std/#primitives
co $ ..
