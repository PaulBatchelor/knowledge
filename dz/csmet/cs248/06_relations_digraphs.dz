ns +toc/06_relations_digraphs
nn 01_intro_binary_relations
ln 6.1: Introduction to Binary Relations

nn 02_props_of_binary_relations
ln 6.2: Properties of Binary Relations

nn 03_digraphs_paths_cycles
ln 6.3: Directed Graphs, Paths, and Cycles

nn 04_composition_of_relations
ln 6.4: Composition of Relations

nn 05_graph_powers_transitive_closure
ln 6.5: Graph Powers and the transitive closure

nn 06_matrix_multiplication_graph_powers
ln 6.6 Matrix Multiplication and Graph Powers

nn 07_partial_orders
ln 6.7 Partial Orders

nn 08_strict_orders_DAGs
ln 6.8: Strict Orders and Direct Acyclic Graphs

zz 9 equivalence relations
zz 10 N-ary relations and relational databases
ns ../..

nn glossary/binary_relation
ln Binary Relation: a way of expressing a relationship
ln between two sets. A binary relation between two sets
ln A and B is a subet R of AxB.

nn glossary/reflexive
ln Reflexive: for binary relation R on set A,
ln R is reflexive iff for every x belonging to A, xRx.
ff Define "reflesive"
fb Reflexive: for binary relation R on set A,
fb R is reflexive iff for every x belonging to A, xRx.
co $ ?02_props_of_binary_relations

nn glossary/anti_reflexive
ln anti-reflexive: not reflexive
td give example of anti-reflexive
co $ ?02_props_of_binary_relations
co $ ../reflexive

nn glossary/symmetric
ln symmetric: for binary relation R on set A,
ln R is symmetric iff for every pair x and y in set A,
ln xRy iff yRx.
ff Define "symmetric"
fb symmetric: for binary relation R on set A,
fb R is symmetric iff for every pair x and y in set A,
fb xRy iff yRx.
co $ ?02_props_of_binary_relations

nn glossary/anti_symmetric
ln anti-symmetric: if x != y, then xRy and yRx can't both
ln be true. see symmetric.
co $ ../symmetric
co $ ?02_props_of_binary_relations

nn glossary/transitive
ln transitive: R is transitive iff for every three elements
ln x, y, z belonging to A, if xRy and yRz, then xRz must
ln be true.
ff Define "transitive"
fb transitive: R is transitive iff for every three elements
fb x, y, z belonging to A, if xRy and yRz, then xRz must
fb be true.
co $ ?02_props_of_binary_relations

nn glossary/graph_power_theorem
co $ ?05_graph_powers_transitive_closure
ln Graph Power Theorem: let G be a directed graph.
ln let u and v be any two vertices in G. THere is an edge
ln from u to v in G^k if and only if there is a walk of
ln length k from u to v in G.
ff What is the Graph Power theorem?
fb For any k >=1, there is an edge(u,v) in G^k if and only
fb if ther eis a walk from u to v of length k in G.

nn glossary/square_matrix
ln Square Matrix: matrix where number of rows and columns are equal.
ff What is a Square Matrix?
fb Square Matrix: matrix where number of rows and columns are equal.
co $ ?06_matrix_multiplication_graph_powers

nn glossary/adjacency_matrix
ln Adjacency Matrix: nxn matrix of set 0,1, representing
ln a digraph n vertices. A_{i,j} = 1 if G contains an edge
ln from vertex i to j, otherwise A_{i,j} = 0.
ff What is an Adjacency Matrix?
fb Adjacency Matrix: nxn matrix of set 0,1, representing
fb a digraph n vertices. A_{i,j} = 1 if G contains an edge
fb from vertex i to j, otherwise A_{i,j} = 0.
co $ ?06_matrix_multiplication_graph_powers

nn glossary/boolean_matrix
ln Boolean Matrix: a matrix with entries from the set 0,1
ff What is a Boolean Matrix?
fb Boolean Matrix: a matrix with entries from the set 0,1
co $ ?06_matrix_multiplication_graph_powers

nn glossary/strict_order
ln Strict Order: a relation R is a strict order if R is
ln anti-reflexive and transient. Strict order acts like
ln the "<" operator, whereas the partial ordering acts like
ln "<=" operator.
ff What is a strict order?
fb Strict Order: a relation R is a strict order if R is
fb anti-reflexive and transient. Strict order acts like
fb the "<" operator, whereas the partial ordering acts like
fb "<=" operator.
co $ ?08_strict_orders_DAGs

nn glossary/DAG
ln Directed Acyclic Graph (DAG): a directed graph that
ln has no cycles.
co $ ?08_strict_orders_DAGs
ff What is a DAG?
fb Directed Acyclic Graph (DAG): a directed graph that
fb has no cycles.

nn glossary/topological_sort
co $ ?08_strict_orders_DAGs
ln Topological Sort: ordering of vertices that is consistent
ln with the edges of a graph.
ff What is a topological sort?
fb Topological Sort: ordering of vertices that is consistent
fb with the edges of a graph.
