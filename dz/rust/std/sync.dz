zz AUTOGENERATED FILE. Probably don't modify by hand?
ns rust/std/modules/sync

nn structs
hl https://doc.rust-lang.org/std/sync#structs
co $ ..

ns +structs

nn Arc
hl https://doc.rust-lang.org/std/sync/struct.Arc.html
co $ ..
ln A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'.
ff sync::Arc
fb A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'.

nn Barrier
hl https://doc.rust-lang.org/std/sync/struct.Barrier.html
co $ ..
ln A barrier enables multiple threads to synchronize the beginning of some computation.
ff sync::Barrier
fb A barrier enables multiple threads to synchronize the beginning of some computation.

nn BarrierWaitResult
hl https://doc.rust-lang.org/std/sync/struct.BarrierWaitResult.html
co $ ..
ln A BarrierWaitResult is returned by Barrier::wait() when all threads in the Barrier have rendezvoused.
ff sync::BarrierWaitResult
fb A BarrierWaitResult is returned by Barrier::wait() when all threads in the Barrier have rendezvoused.

nn Condvar
hl https://doc.rust-lang.org/std/sync/struct.Condvar.html
co $ ..
ln A Condition Variable
ff sync::Condvar
fb A Condition Variable

nn LazyLock
hl https://doc.rust-lang.org/std/sync/struct.LazyLock.html
co $ ..
ln A value which is initialized on the first access.
ff sync::LazyLock
fb A value which is initialized on the first access.

nn Mutex
hl https://doc.rust-lang.org/std/sync/struct.Mutex.html
co $ ..
ln A mutual exclusion primitive useful for protecting shared data
ff sync::Mutex
fb A mutual exclusion primitive useful for protecting shared data

nn MutexGuard
hl https://doc.rust-lang.org/std/sync/struct.MutexGuard.html
co $ ..
ln An RAII implementation of a "scoped lock" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.
ff sync::MutexGuard
fb An RAII implementation of a "scoped lock" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.

nn Once
hl https://doc.rust-lang.org/std/sync/struct.Once.html
co $ ..
ln A low-level synchronization primitive for one-time global execution.
ff sync::Once
fb A low-level synchronization primitive for one-time global execution.

nn OnceLock
hl https://doc.rust-lang.org/std/sync/struct.OnceLock.html
co $ ..
ln A synchronization primitive which can nominally be written to only once.
ff sync::OnceLock
fb A synchronization primitive which can nominally be written to only once.

nn OnceState
hl https://doc.rust-lang.org/std/sync/struct.OnceState.html
co $ ..
ln State yielded to Once::call_once_force()'s closure parameter. The state can be used to query the poison status of the Once.
ff sync::OnceState
fb State yielded to Once::call_once_force()'s closure parameter. The state can be used to query the poison status of the Once.

nn PoisonError
hl https://doc.rust-lang.org/std/sync/struct.PoisonError.html
co $ ..
ln A type of error which can be returned whenever a lock is acquired.
ff sync::PoisonError
fb A type of error which can be returned whenever a lock is acquired.

nn RwLock
hl https://doc.rust-lang.org/std/sync/struct.RwLock.html
co $ ..
ln A reader-writer lock
ff sync::RwLock
fb A reader-writer lock

nn RwLockReadGuard
hl https://doc.rust-lang.org/std/sync/struct.RwLockReadGuard.html
co $ ..
ln RAII structure used to release the shared read access of a lock when dropped.
ff sync::RwLockReadGuard
fb RAII structure used to release the shared read access of a lock when dropped.

nn RwLockWriteGuard
hl https://doc.rust-lang.org/std/sync/struct.RwLockWriteGuard.html
co $ ..
ln RAII structure used to release the exclusive write access of a lock when dropped.
ff sync::RwLockWriteGuard
fb RAII structure used to release the exclusive write access of a lock when dropped.

nn WaitTimeoutResult
hl https://doc.rust-lang.org/std/sync/struct.WaitTimeoutResult.html
co $ ..
ln A type indicating whether a timed wait on a condition variable returned due to a time out or not.
ff sync::WaitTimeoutResult
fb A type indicating whether a timed wait on a condition variable returned due to a time out or not.

nn Weak
hl https://doc.rust-lang.org/std/sync/struct.Weak.html
co $ ..
ln Weak is a version of Arc that holds a non-owning reference to the managed allocation.
ff sync::Weak
fb Weak is a version of Arc that holds a non-owning reference to the managed allocation.

zz -structs
ns ..
